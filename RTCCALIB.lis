/tmp/tmpXXZav7ga.asm:
     1                          MODULE cpm_crt_asm_m4
     2                          LINE 0, "/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
                                
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          
     7                          
     8                          
     9                          
    10                          
    11                          IFNDEF startup
    12                          
    13                             ; startup undefined so select a default
    14                          
    15                             defc startup = 0
    16                          
    17                          ENDIF
    18                          
    19                          
    20                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    21                          ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    22                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    23                          
    24                          
    25                          
    26                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    27                          ;; cp/m native console ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          
    31                             IFNDEF __CRTCFG
    32                          
    33                                defc __CRTCFG = 0
    34                          
    35                             ENDIF
    36                          
    37                             IFNDEF __MMAP
    38                          
    39                                defc __MMAP = 0
    40                          
    41                             ENDIF
    42                          
    43                             ; stdin  = cpm_00_input_cons (bdos function 10)
    44                             ; stdout = cpm_00_output_cons (bdos function 2)
    45                             ; stderr = dup(stdout)
    46                             ; stdrdr = cpm_00_input_reader (bdos function 3)
    47                             ; stdpun = cpm_00_output_punch (bdos function 4)
    48                             ; stdlst = cpm_00_output_list (bdos function 5)
    49                          
    50                          
    51                          
    52                          
    53                          
    54                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                          ;;                      cpm ram model                        ;;
    56                          ;;   generated by target/cpm/startup/cpm_crt_0.asm.m4        ;;
    57                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    58                          
    59                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    60                          ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    61                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    62                          
    63                          include "config_cpm_public.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/config_cpm_public.inc:
     1                          
     2                          
     3                          
     4                          
     5                          IFNDEF __CONFIG_Z88DK_INC_
     6                          defc   __CONFIG_Z88DK_INC_ = 1
     7                          
     8                          ; Automatically Generated at Library Build Time
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          PUBLIC __Z88DK
    20                          
    21                          
    22                          
    23                          
    24                          defc __Z88DK = 2300
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32                          
    33                          
    34                          PUBLIC __CPM
    35                          
    36                          
    37                          
    38                          
    39                          defc __CPM = 22
    40                          
    41                          
    42                          
    43                          
    44                          
    45                          
    46                          
    47                          
    48                          
    49                          PUBLIC __Z80
    50                          
    51                          PUBLIC __Z80_NMOS
    52                          PUBLIC __Z80_CMOS
    53                          
    54                          PUBLIC __CPU_INFO
    55                          
    56                          PUBLIC __CPU_INFO_ENABLE_SLL
    57                          
    58                          
    59                          
    60                          
    61                          defc __Z80 = 0x01
    62                          
    63                          defc __Z80_NMOS = 0x01
    64                          defc __Z80_CMOS = 0x02
    65                          
    66                          defc __CPU_CLOCK = 4000000
    67                          
    68                          defc __CPU_INFO = 0x00
    69                          
    70                          defc __CPU_INFO_ENABLE_SLL = 0x01
    71                          
    72                          
    73                          
    74                          
    75                          
    76                          
    77                          
    78                          
    79                          
    80                          PUBLIC __CLIB_OPT_MULTITHREAD
    81                          
    82                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
    83                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
    84                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
    85                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
    86                          PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
    87                          
    88                          PUBLIC __CLIB_OPT_IMATH
    89                          
    90                          PUBLIC __CLIB_OPT_IMATH_FAST
    91                          
    92                          PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
    93                          PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
    94                          PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
    95                          PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
    96                          PUBLIC __CLIB_OPT_IMATH_FAST_LIA
    97                          
    98                          PUBLIC __CLIB_OPT_IMATH_SELECT
    99                          
   100                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
   101                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
   102                          PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
   103                          
   104                          PUBLIC __CLIB_OPT_TXT2NUM
   105                          
   106                          PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
   107                          PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
   108                          PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
   109                          PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
   110                          
   111                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
   112                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
   113                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
   114                          PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
   115                          
   116                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT
   117                          
   118                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
   119                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
   120                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
   121                          PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
   122                          
   123                          PUBLIC __CLIB_OPT_NUM2TXT
   124                          
   125                          PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
   126                          PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
   127                          PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
   128                          PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
   129                          
   130                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
   131                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
   132                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
   133                          PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
   134                          
   135                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT
   136                          
   137                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
   138                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
   139                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
   140                          PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
   141                          
   142                          PUBLIC __CLIB_OPT_STDIO
   143                          
   144                          PUBLIC __CLIB_OPT_STDIO_VALID
   145                          
   146                          PUBLIC CHAR_CR
   147                          PUBLIC CHAR_LF
   148                          PUBLIC CHAR_BS
   149                          PUBLIC CHAR_ESC
   150                          PUBLIC CHAR_CAPS
   151                          PUBLIC CHAR_BELL
   152                          PUBLIC CHAR_CTRL_C
   153                          PUBLIC CHAR_CTRL_D
   154                          PUBLIC CHAR_CTRL_Z
   155                          PUBLIC CHAR_CURSOR_UC
   156                          PUBLIC CHAR_CURSOR_LC
   157                          PUBLIC CHAR_PASSWORD
   158                          
   159                          PUBLIC __CLIB_OPT_PRINTF
   160                          
   161                          PUBLIC __CLIB_OPT_PRINTF_d
   162                          PUBLIC __CLIB_OPT_PRINTF_u
   163                          PUBLIC __CLIB_OPT_PRINTF_x
   164                          PUBLIC __CLIB_OPT_PRINTF_X
   165                          PUBLIC __CLIB_OPT_PRINTF_o
   166                          PUBLIC __CLIB_OPT_PRINTF_n
   167                          PUBLIC __CLIB_OPT_PRINTF_i
   168                          PUBLIC __CLIB_OPT_PRINTF_p
   169                          PUBLIC __CLIB_OPT_PRINTF_B
   170                          PUBLIC __CLIB_OPT_PRINTF_s
   171                          PUBLIC __CLIB_OPT_PRINTF_c
   172                          PUBLIC __CLIB_OPT_PRINTF_I
   173                          PUBLIC __CLIB_OPT_PRINTF_ld
   174                          PUBLIC __CLIB_OPT_PRINTF_lu
   175                          PUBLIC __CLIB_OPT_PRINTF_lx
   176                          PUBLIC __CLIB_OPT_PRINTF_lX
   177                          PUBLIC __CLIB_OPT_PRINTF_lo
   178                          PUBLIC __CLIB_OPT_PRINTF_ln
   179                          PUBLIC __CLIB_OPT_PRINTF_li
   180                          PUBLIC __CLIB_OPT_PRINTF_lp
   181                          PUBLIC __CLIB_OPT_PRINTF_lB
   182                          PUBLIC __CLIB_OPT_PRINTF_a
   183                          PUBLIC __CLIB_OPT_PRINTF_A
   184                          PUBLIC __CLIB_OPT_PRINTF_e
   185                          PUBLIC __CLIB_OPT_PRINTF_E
   186                          PUBLIC __CLIB_OPT_PRINTF_f
   187                          PUBLIC __CLIB_OPT_PRINTF_F
   188                          PUBLIC __CLIB_OPT_PRINTF_g
   189                          PUBLIC __CLIB_OPT_PRINTF_G
   190                          
   191                          PUBLIC __CLIB_OPT_PRINTF_2
   192                          
   193                          PUBLIC __CLIB_OPT_PRINTF_2_lld
   194                          PUBLIC __CLIB_OPT_PRINTF_2_llu
   195                          PUBLIC __CLIB_OPT_PRINTF_2_llx
   196                          PUBLIC __CLIB_OPT_PRINTF_2_llX
   197                          PUBLIC __CLIB_OPT_PRINTF_2_llo
   198                          PUBLIC __CLIB_OPT_PRINTF_2_lli
   199                          
   200                          PUBLIC __CLIB_OPT_SCANF
   201                          
   202                          PUBLIC __CLIB_OPT_SCANF_d
   203                          PUBLIC __CLIB_OPT_SCANF_u
   204                          PUBLIC __CLIB_OPT_SCANF_x
   205                          PUBLIC __CLIB_OPT_SCANF_X
   206                          PUBLIC __CLIB_OPT_SCANF_o
   207                          PUBLIC __CLIB_OPT_SCANF_n
   208                          PUBLIC __CLIB_OPT_SCANF_i
   209                          PUBLIC __CLIB_OPT_SCANF_p
   210                          PUBLIC __CLIB_OPT_SCANF_B
   211                          PUBLIC __CLIB_OPT_SCANF_s
   212                          PUBLIC __CLIB_OPT_SCANF_c
   213                          PUBLIC __CLIB_OPT_SCANF_I
   214                          PUBLIC __CLIB_OPT_SCANF_ld
   215                          PUBLIC __CLIB_OPT_SCANF_lu
   216                          PUBLIC __CLIB_OPT_SCANF_lx
   217                          PUBLIC __CLIB_OPT_SCANF_lX
   218                          PUBLIC __CLIB_OPT_SCANF_lo
   219                          PUBLIC __CLIB_OPT_SCANF_ln
   220                          PUBLIC __CLIB_OPT_SCANF_li
   221                          PUBLIC __CLIB_OPT_SCANF_lp
   222                          PUBLIC __CLIB_OPT_SCANF_lB
   223                          PUBLIC __CLIB_OPT_SCANF_BRACKET
   224                          PUBLIC __CLIB_OPT_SCANF_a
   225                          PUBLIC __CLIB_OPT_SCANF_A
   226                          PUBLIC __CLIB_OPT_SCANF_e
   227                          PUBLIC __CLIB_OPT_SCANF_E
   228                          PUBLIC __CLIB_OPT_SCANF_f
   229                          PUBLIC __CLIB_OPT_SCANF_F
   230                          PUBLIC __CLIB_OPT_SCANF_g
   231                          PUBLIC __CLIB_OPT_SCANF_G
   232                          
   233                          PUBLIC __CLIB_OPT_SCANF_2
   234                          
   235                          PUBLIC __CLIB_OPT_SCANF_2_lld
   236                          PUBLIC __CLIB_OPT_SCANF_2_llu
   237                          PUBLIC __CLIB_OPT_SCANF_2_llx
   238                          PUBLIC __CLIB_OPT_SCANF_2_llX
   239                          PUBLIC __CLIB_OPT_SCANF_2_llo
   240                          PUBLIC __CLIB_OPT_SCANF_2_lli
   241                          
   242                          PUBLIC __CLIB_OPT_UNROLL
   243                          
   244                          PUBLIC __CLIB_OPT_UNROLL_MEMCPY
   245                          PUBLIC __CLIB_OPT_UNROLL_MEMSET
   246                          PUBLIC __CLIB_OPT_UNROLL_OTIR
   247                          PUBLIC __CLIB_OPT_UNROLL_LDIR
   248                          PUBLIC __CLIB_OPT_UNROLL_USER_SMC
   249                          PUBLIC __CLIB_OPT_UNROLL_LIB_SMC
   250                          
   251                          PUBLIC __CLIB_OPT_STRTOD
   252                          
   253                          PUBLIC __CLIB_OPT_STRTOD_NAN
   254                          PUBLIC __CLIB_OPT_STRTOD_INF
   255                          PUBLIC __CLIB_OPT_STRTOD_HEX
   256                          
   257                          PUBLIC __CLIB_OPT_SORT
   258                          
   259                          PUBLIC __CLIB_OPT_SORT_INSERTION
   260                          PUBLIC __CLIB_OPT_SORT_SHELL
   261                          PUBLIC __CLIB_OPT_SORT_QUICK
   262                          
   263                          PUBLIC __CLIB_OPT_SORT_QSORT
   264                          
   265                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
   266                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
   267                          PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
   268                          PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
   269                          PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
   270                          
   271                          PUBLIC __CLIB_OPT_ERROR
   272                          
   273                          PUBLIC __CLIB_OPT_ERROR_ENABLED
   274                          PUBLIC __CLIB_OPT_ERROR_VERBOSE
   275                          
   276                          
   277                          
   278                          
   279                          defc __CLIB_OPT_MULTITHREAD = 0x00
   280                          
   281                          defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
   282                          defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
   283                          defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
   284                          defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
   285                          defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
   286                          
   287                          defc __CLIB_OPT_IMATH = 0
   288                          
   289                          defc __CLIB_OPT_IMATH_FAST = 0x0f
   290                          
   291                          defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
   292                          defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
   293                          defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
   294                          defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
   295                          defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
   296                          
   297                          defc __CLIB_OPT_IMATH_SELECT = 0x00
   298                          
   299                          defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
   300                          defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
   301                          defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
   302                          
   303                          defc __CLIB_OPT_TXT2NUM = 0x04
   304                          
   305                          defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
   306                          defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
   307                          defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
   308                          defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
   309                          
   310                          defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
   311                          defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
   312                          defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
   313                          defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
   314                          
   315                          defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
   316                          
   317                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
   318                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
   319                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
   320                          defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
   321                          
   322                          defc __CLIB_OPT_NUM2TXT = 0x00
   323                          
   324                          defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
   325                          defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
   326                          defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
   327                          defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
   328                          
   329                          defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
   330                          defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
   331                          defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
   332                          defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
   333                          
   334                          defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
   335                          
   336                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
   337                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
   338                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
   339                          defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
   340                          
   341                          defc __CLIB_OPT_STDIO = 0x00
   342                          
   343                          defc __CLIB_OPT_STDIO_VALID = 0x01
   344                          
   345                          defc CHAR_CR = 13
   346                          defc CHAR_LF = 10
   347                          defc CHAR_BS = 12
   348                          defc CHAR_ESC = 27
   349                          defc CHAR_CAPS = 6
   350                          defc CHAR_BELL = 7
   351                          defc CHAR_CTRL_C = 3
   352                          defc CHAR_CTRL_D = 4
   353                          defc CHAR_CTRL_Z = 26
   354                          defc CHAR_CURSOR_UC = 45
   355                          defc CHAR_CURSOR_LC = 95
   356                          defc CHAR_PASSWORD = 42
   357                          
   358                          defc __CLIB_OPT_PRINTF = 0x002ff6ff
   359                          
   360                          defc __CLIB_OPT_PRINTF_d = 0x00000001
   361                          defc __CLIB_OPT_PRINTF_u = 0x00000002
   362                          defc __CLIB_OPT_PRINTF_x = 0x00000004
   363                          defc __CLIB_OPT_PRINTF_X = 0x00000008
   364                          defc __CLIB_OPT_PRINTF_o = 0x00000010
   365                          defc __CLIB_OPT_PRINTF_n = 0x00000020
   366                          defc __CLIB_OPT_PRINTF_i = 0x00000040
   367                          defc __CLIB_OPT_PRINTF_p = 0x00000080
   368                          defc __CLIB_OPT_PRINTF_B = 0x00000100
   369                          defc __CLIB_OPT_PRINTF_s = 0x00000200
   370                          defc __CLIB_OPT_PRINTF_c = 0x00000400
   371                          defc __CLIB_OPT_PRINTF_I = 0x00000800
   372                          defc __CLIB_OPT_PRINTF_ld = 0x00001000
   373                          defc __CLIB_OPT_PRINTF_lu = 0x00002000
   374                          defc __CLIB_OPT_PRINTF_lx = 0x00004000
   375                          defc __CLIB_OPT_PRINTF_lX = 0x00008000
   376                          defc __CLIB_OPT_PRINTF_lo = 0x00010000
   377                          defc __CLIB_OPT_PRINTF_ln = 0x00020000
   378                          defc __CLIB_OPT_PRINTF_li = 0x00040000
   379                          defc __CLIB_OPT_PRINTF_lp = 0x00080000
   380                          defc __CLIB_OPT_PRINTF_lB = 0x00100000
   381                          defc __CLIB_OPT_PRINTF_a = 0x00400000
   382                          defc __CLIB_OPT_PRINTF_A = 0x00800000
   383                          defc __CLIB_OPT_PRINTF_e = 0x01000000
   384                          defc __CLIB_OPT_PRINTF_E = 0x02000000
   385                          defc __CLIB_OPT_PRINTF_f = 0x04000000
   386                          defc __CLIB_OPT_PRINTF_F = 0x08000000
   387                          defc __CLIB_OPT_PRINTF_g = 0x10000000
   388                          defc __CLIB_OPT_PRINTF_G = 0x20000000
   389                          
   390                          defc __CLIB_OPT_PRINTF_2 = 0x00
   391                          
   392                          defc __CLIB_OPT_PRINTF_2_lld = 0x01
   393                          defc __CLIB_OPT_PRINTF_2_llu = 0x02
   394                          defc __CLIB_OPT_PRINTF_2_llx = 0x04
   395                          defc __CLIB_OPT_PRINTF_2_llX = 0x08
   396                          defc __CLIB_OPT_PRINTF_2_llo = 0x10
   397                          defc __CLIB_OPT_PRINTF_2_lli = 0x40
   398                          
   399                          defc __CLIB_OPT_SCANF = 0x002ff6ff
   400                          
   401                          defc __CLIB_OPT_SCANF_d = 0x00000001
   402                          defc __CLIB_OPT_SCANF_u = 0x00000002
   403                          defc __CLIB_OPT_SCANF_x = 0x00000004
   404                          defc __CLIB_OPT_SCANF_X = 0x00000008
   405                          defc __CLIB_OPT_SCANF_o = 0x00000010
   406                          defc __CLIB_OPT_SCANF_n = 0x00000020
   407                          defc __CLIB_OPT_SCANF_i = 0x00000040
   408                          defc __CLIB_OPT_SCANF_p = 0x00000080
   409                          defc __CLIB_OPT_SCANF_B = 0x00000100
   410                          defc __CLIB_OPT_SCANF_s = 0x00000200
   411                          defc __CLIB_OPT_SCANF_c = 0x00000400
   412                          defc __CLIB_OPT_SCANF_I = 0x00000800
   413                          defc __CLIB_OPT_SCANF_ld = 0x00001000
   414                          defc __CLIB_OPT_SCANF_lu = 0x00002000
   415                          defc __CLIB_OPT_SCANF_lx = 0x00004000
   416                          defc __CLIB_OPT_SCANF_lX = 0x00008000
   417                          defc __CLIB_OPT_SCANF_lo = 0x00010000
   418                          defc __CLIB_OPT_SCANF_ln = 0x00020000
   419                          defc __CLIB_OPT_SCANF_li = 0x00040000
   420                          defc __CLIB_OPT_SCANF_lp = 0x00080000
   421                          defc __CLIB_OPT_SCANF_lB = 0x00100000
   422                          defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
   423                          defc __CLIB_OPT_SCANF_a = 0x00400000
   424                          defc __CLIB_OPT_SCANF_A = 0x00800000
   425                          defc __CLIB_OPT_SCANF_e = 0x01000000
   426                          defc __CLIB_OPT_SCANF_E = 0x02000000
   427                          defc __CLIB_OPT_SCANF_f = 0x04000000
   428                          defc __CLIB_OPT_SCANF_F = 0x08000000
   429                          defc __CLIB_OPT_SCANF_g = 0x10000000
   430                          defc __CLIB_OPT_SCANF_G = 0x20000000
   431                          
   432                          defc __CLIB_OPT_SCANF_2 = 0x00
   433                          
   434                          defc __CLIB_OPT_SCANF_2_lld = 0x01
   435                          defc __CLIB_OPT_SCANF_2_llu = 0x02
   436                          defc __CLIB_OPT_SCANF_2_llx = 0x04
   437                          defc __CLIB_OPT_SCANF_2_llX = 0x08
   438                          defc __CLIB_OPT_SCANF_2_llo = 0x10
   439                          defc __CLIB_OPT_SCANF_2_lli = 0x40
   440                          
   441                          defc __CLIB_OPT_UNROLL = 0x00
   442                          
   443                          defc __CLIB_OPT_UNROLL_MEMCPY = 0x01
   444                          defc __CLIB_OPT_UNROLL_MEMSET = 0x02
   445                          defc __CLIB_OPT_UNROLL_OTIR = 0x10
   446                          defc __CLIB_OPT_UNROLL_LDIR = 0x20
   447                          defc __CLIB_OPT_UNROLL_USER_SMC = 0x40
   448                          defc __CLIB_OPT_UNROLL_LIB_SMC = 0x80
   449                          
   450                          defc __CLIB_OPT_STRTOD = 0x00
   451                          
   452                          defc __CLIB_OPT_STRTOD_NAN = 0x01
   453                          defc __CLIB_OPT_STRTOD_INF = 0x01
   454                          defc __CLIB_OPT_STRTOD_HEX = 0x02
   455                          
   456                          defc __CLIB_OPT_SORT = 1
   457                          
   458                          defc __CLIB_OPT_SORT_INSERTION = 0
   459                          defc __CLIB_OPT_SORT_SHELL = 1
   460                          defc __CLIB_OPT_SORT_QUICK = 2
   461                          
   462                          defc __CLIB_OPT_SORT_QSORT = 0x0c
   463                          
   464                          defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
   465                          defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
   466                          defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
   467                          defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
   468                          defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
   469                          
   470                          defc __CLIB_OPT_ERROR = 0x00
   471                          
   472                          defc __CLIB_OPT_ERROR_ENABLED = 0x01
   473                          defc __CLIB_OPT_ERROR_VERBOSE = 0x02
   474                          
   475                          
   476                          
   477                          
   478                          
   479                          
   480                          
   481                          
   482                          
   483                          
   484                          
   485                          
   486                          
   487                          PUBLIC __EOK
   488                          PUBLIC __EACCES
   489                          PUBLIC __EBADF
   490                          PUBLIC __EBDFD
   491                          PUBLIC __EDOM
   492                          PUBLIC __EFBIG
   493                          PUBLIC __EINVAL
   494                          PUBLIC __EIO
   495                          PUBLIC __EMFILE
   496                          PUBLIC __ENFILE
   497                          PUBLIC __ENOLCK
   498                          PUBLIC __ENOMEM
   499                          PUBLIC __ENOTSUP
   500                          PUBLIC __EOVERFLOW
   501                          PUBLIC __ERANGE
   502                          PUBLIC __ESTAT
   503                          PUBLIC __EAGAIN
   504                          PUBLIC __EWOULDBLOCK
   505                          
   506                          PUBLIC __ERROR_NEXT
   507                          
   508                          PUBLIC STDIO_SEEK_SET
   509                          PUBLIC STDIO_SEEK_CUR
   510                          PUBLIC STDIO_SEEK_END
   511                          
   512                          PUBLIC STDIO_MSG_PUTC
   513                          PUBLIC STDIO_MSG_WRIT
   514                          PUBLIC STDIO_MSG_GETC
   515                          PUBLIC STDIO_MSG_EATC
   516                          PUBLIC STDIO_MSG_READ
   517                          PUBLIC STDIO_MSG_SEEK
   518                          PUBLIC STDIO_MSG_ICTL
   519                          PUBLIC STDIO_MSG_FLSH
   520                          PUBLIC STDIO_MSG_CLOS
   521                          
   522                          PUBLIC ITERM_MSG_GETC
   523                          PUBLIC ITERM_MSG_REJECT
   524                          PUBLIC ITERM_MSG_INTERRUPT
   525                          PUBLIC ITERM_MSG_PUTC
   526                          PUBLIC ITERM_MSG_PRINT_CURSOR
   527                          PUBLIC ITERM_MSG_ERASE_CURSOR
   528                          PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
   529                          PUBLIC ITERM_MSG_BS
   530                          PUBLIC ITERM_MSG_BS_PWD
   531                          PUBLIC ITERM_MSG_READLINE_BEGIN
   532                          PUBLIC ITERM_MSG_READLINE_END
   533                          PUBLIC ITERM_MSG_READLINE_SCROLL_LIMIT
   534                          PUBLIC ITERM_MSG_BELL
   535                          
   536                          PUBLIC __MESSAGE_ITERM_NEXT__
   537                          
   538                          PUBLIC OTERM_MSG_PUTC
   539                          PUBLIC OTERM_MSG_TTY
   540                          PUBLIC OTERM_MSG_FZX_PUTC
   541                          PUBLIC OTERM_MSG_PRINTC
   542                          PUBLIC OTERM_MSG_SCROLL
   543                          PUBLIC OTERM_MSG_SCROLL_LIMIT
   544                          PUBLIC OTERM_MSG_CLS
   545                          PUBLIC OTERM_MSG_PAUSE
   546                          PUBLIC OTERM_MSG_BELL
   547                          PUBLIC OTERM_MSG_PSCROLL
   548                          PUBLIC OTERM_MSG_FZX_GET_XOR_DRAW
   549                          
   550                          PUBLIC __MESSAGE_OTERM_NEXT__
   551                          
   552                          PUBLIC ICHAR_MSG_GETC
   553                          PUBLIC OCHAR_MSG_PUTC_BIN
   554                          PUBLIC OCHAR_MSG_PUTC
   555                          
   556                          PUBLIC __MESSAGE_NEXT__
   557                          
   558                          PUBLIC mtx_plain
   559                          PUBLIC mtx_recursive
   560                          PUBLIC mtx_timed
   561                          
   562                          PUBLIC thrd_success
   563                          PUBLIC thrd_error
   564                          PUBLIC thrd_nomem
   565                          PUBLIC thrd_busy
   566                          PUBLIC thrd_timedout
   567                          
   568                          PUBLIC IOCTL_RESET
   569                          
   570                          PUBLIC IOCTL_ITERM_ECHO
   571                          PUBLIC IOCTL_ITERM_PASS
   572                          PUBLIC IOCTL_ITERM_LINE
   573                          PUBLIC IOCTL_ITERM_COOK
   574                          PUBLIC IOCTL_ITERM_CAPS
   575                          PUBLIC IOCTL_ITERM_CRLF
   576                          PUBLIC IOCTL_ITERM_CURS
   577                          
   578                          PUBLIC IOCTL_ITERM_TIE
   579                          PUBLIC IOCTL_ITERM_GET_EDITBUF
   580                          PUBLIC IOCTL_ITERM_SET_EDITBUF
   581                          
   582                          PUBLIC IOCTL_OTERM_PAGE
   583                          PUBLIC IOCTL_OTERM_PAUSE
   584                          PUBLIC IOCTL_OTERM_COOK
   585                          PUBLIC IOCTL_OTERM_CRLF
   586                          PUBLIC IOCTL_OTERM_CLEAR
   587                          PUBLIC IOCTL_OTERM_SIGNAL
   588                          PUBLIC IOCTL_OTERM_BELL
   589                          
   590                          PUBLIC IOCTL_OTERM_CLS
   591                          PUBLIC IOCTL_OTERM_RESET_SCROLL
   592                          PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
   593                          PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
   594                          PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
   595                          PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
   596                          PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
   597                          PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
   598                          PUBLIC IOCTL_OTERM_GET_OTERM
   599                          PUBLIC IOCTL_OTERM_SCROLL
   600                          PUBLIC IOCTL_OTERM_FONT
   601                          PUBLIC IOCTL_OTERM_SCROLL_LIMIT
   602                          
   603                          PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
   604                          PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
   605                          PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
   606                          PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
   607                          PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
   608                          PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
   609                          PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
   610                          PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
   611                          PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
   612                          
   613                          PUBLIC IOCTL_ICHAR_CRLF
   614                          
   615                          PUBLIC IOCTL_OCHAR_CRLF
   616                          
   617                          
   618                          
   619                          
   620                          defc __EOK = 0
   621                          defc __EACCES = 1
   622                          defc __EBADF = 2
   623                          defc __EBDFD = 3
   624                          defc __EDOM = 4
   625                          defc __EFBIG = 5
   626                          defc __EINVAL = 6
   627                          defc __EIO = 7
   628                          defc __EMFILE = 8
   629                          defc __ENFILE = 9
   630                          defc __ENOLCK = 10
   631                          defc __ENOMEM = 11
   632                          defc __ENOTSUP = 12
   633                          defc __EOVERFLOW = 13
   634                          defc __ERANGE = 14
   635                          defc __ESTAT = 15
   636                          defc __EAGAIN = 16
   637                          defc __EWOULDBLOCK = 16
   638                          
   639                          defc __ERROR_NEXT = 50
   640                          
   641                          defc STDIO_SEEK_SET = 0
   642                          defc STDIO_SEEK_CUR = 1
   643                          defc STDIO_SEEK_END = 2
   644                          
   645                          defc STDIO_MSG_PUTC = 1
   646                          defc STDIO_MSG_WRIT = 2
   647                          defc STDIO_MSG_GETC = 3
   648                          defc STDIO_MSG_EATC = 4
   649                          defc STDIO_MSG_READ = 5
   650                          defc STDIO_MSG_SEEK = 6
   651                          defc STDIO_MSG_ICTL = 7
   652                          defc STDIO_MSG_FLSH = 8
   653                          defc STDIO_MSG_CLOS = 9
   654                          
   655                          defc ITERM_MSG_GETC = 15
   656                          defc ITERM_MSG_REJECT = 16
   657                          defc ITERM_MSG_INTERRUPT = 17
   658                          defc ITERM_MSG_PUTC = 18
   659                          defc ITERM_MSG_PRINT_CURSOR = 19
   660                          defc ITERM_MSG_ERASE_CURSOR = 20
   661                          defc ITERM_MSG_ERASE_CURSOR_PWD = 21
   662                          defc ITERM_MSG_BS = 22
   663                          defc ITERM_MSG_BS_PWD = 23
   664                          defc ITERM_MSG_READLINE_BEGIN = 24
   665                          defc ITERM_MSG_READLINE_END = 25
   666                          defc ITERM_MSG_READLINE_SCROLL_LIMIT = 26
   667                          defc ITERM_MSG_BELL = 27
   668                          
   669                          defc __MESSAGE_ITERM_NEXT__ = 28
   670                          
   671                          defc OTERM_MSG_PUTC = 30
   672                          defc OTERM_MSG_TTY = 31
   673                          defc OTERM_MSG_FZX_PUTC = 32
   674                          defc OTERM_MSG_PRINTC = 33
   675                          defc OTERM_MSG_SCROLL = 34
   676                          defc OTERM_MSG_SCROLL_LIMIT = 35
   677                          defc OTERM_MSG_CLS = 36
   678                          defc OTERM_MSG_PAUSE = 37
   679                          defc OTERM_MSG_BELL = 38
   680                          defc OTERM_MSG_PSCROLL = 39
   681                          defc OTERM_MSG_FZX_GET_XOR_DRAW = 40
   682                          
   683                          defc __MESSAGE_OTERM_NEXT__ = 41
   684                          
   685                          defc ICHAR_MSG_GETC = 15
   686                          defc OCHAR_MSG_PUTC_BIN = 30
   687                          defc OCHAR_MSG_PUTC = 33
   688                          
   689                          defc __MESSAGE_NEXT__ = 45
   690                          
   691                          defc mtx_plain = 0x01
   692                          defc mtx_recursive = 0x02
   693                          defc mtx_timed = 0x04
   694                          
   695                          defc thrd_success = 0x00
   696                          defc thrd_error = 0x01
   697                          defc thrd_nomem = 0x02
   698                          defc thrd_busy = 0x04
   699                          defc thrd_timedout = 0x08
   700                          
   701                          defc IOCTL_RESET = 0x0000
   702                          
   703                          defc IOCTL_ITERM_ECHO = 0xc081
   704                          defc IOCTL_ITERM_PASS = 0xc041
   705                          defc IOCTL_ITERM_LINE = 0xc021
   706                          defc IOCTL_ITERM_COOK = 0xc011
   707                          defc IOCTL_ITERM_CAPS = 0xc009
   708                          defc IOCTL_ITERM_CRLF = 0xc101
   709                          defc IOCTL_ITERM_CURS = 0xc201
   710                          
   711                          defc IOCTL_ITERM_TIE = 0x0201
   712                          defc IOCTL_ITERM_GET_EDITBUF = 0x0381
   713                          defc IOCTL_ITERM_SET_EDITBUF = 0x0301
   714                          
   715                          defc IOCTL_OTERM_PAGE = 0xc082
   716                          defc IOCTL_OTERM_PAUSE = 0xc042
   717                          defc IOCTL_OTERM_COOK = 0xc022
   718                          defc IOCTL_OTERM_CRLF = 0xc012
   719                          defc IOCTL_OTERM_CLEAR = 0xe002
   720                          defc IOCTL_OTERM_SIGNAL = 0xc202
   721                          defc IOCTL_OTERM_BELL = 0xc102
   722                          
   723                          defc IOCTL_OTERM_CLS = 0x0102
   724                          defc IOCTL_OTERM_RESET_SCROLL = 0x0202
   725                          defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
   726                          defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
   727                          defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
   728                          defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
   729                          defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
   730                          defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
   731                          defc IOCTL_OTERM_GET_OTERM = 0x0602
   732                          defc IOCTL_OTERM_SCROLL = 0x0702
   733                          defc IOCTL_OTERM_FONT = 0x0802
   734                          defc IOCTL_OTERM_SCROLL_LIMIT = 0x0902
   735                          
   736                          defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
   737                          defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
   738                          defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
   739                          defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
   740                          defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
   741                          defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
   742                          defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
   743                          defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
   744                          defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
   745                          
   746                          defc IOCTL_ICHAR_CRLF = 0xc103
   747                          
   748                          defc IOCTL_OCHAR_CRLF = 0xc014
   749                          
   750                          
   751                          
   752                          
   753                          
   754                          
   755                          
   756                          
   757                          
   758                          
   759                          
   760                          
   761                          
   762                          
   763                          
   764                          
   765                          
   766                          
   767                          
   768                          
   769                          
   770                          
   771                          
   772                          
   773                          
   774                          
   775                          
   776                          
   777                          PUBLIC __CPM_RCON
   778                          PUBLIC __CPM_WCON
   779                          PUBLIC __CPM_RRDR
   780                          PUBLIC __CPM_WPUN
   781                          PUBLIC __CPM_WLST
   782                          PUBLIC __CPM_DCIO
   783                          PUBLIC __CPM_GIOB
   784                          PUBLIC __CPM_SIOB
   785                          PUBLIC __CPM_PRST
   786                          PUBLIC __CPM_RCOB
   787                          PUBLIC __CPM_ICON
   788                          PUBLIC __CPM_VERS
   789                          PUBLIC __CPM_RDS
   790                          PUBLIC __CPM_LGIN
   791                          PUBLIC __CPM_OPN
   792                          PUBLIC __CPM_CLS
   793                          PUBLIC __CPM_FFST
   794                          PUBLIC __CPM_FNXT
   795                          PUBLIC __CPM_DEL
   796                          PUBLIC __CPM_READ
   797                          PUBLIC __CPM_WRIT
   798                          PUBLIC __CPM_MAKE
   799                          PUBLIC __CPM_REN
   800                          PUBLIC __CPM_ILOG
   801                          PUBLIC __CPM_IDRV
   802                          PUBLIC __CPM_SDMA
   803                          PUBLIC __CPM_SUID
   804                          PUBLIC __CPM_RRAN
   805                          PUBLIC __CPM_WRAN
   806                          PUBLIC __CPM_CFS
   807                          PUBLIC __CPM_RREC
   808                          PUBLIC __CPM_SRDS
   809                          PUBLIC __CPM_WRZF
   810                          PUBLIC __CPM_DSEG
   811                          
   812                          
   813                          
   814                          
   815                          defc __CPM_RCON = 1
   816                          defc __CPM_WCON = 2
   817                          defc __CPM_RRDR = 3
   818                          defc __CPM_WPUN = 4
   819                          defc __CPM_WLST = 5
   820                          defc __CPM_DCIO = 6
   821                          defc __CPM_GIOB = 7
   822                          defc __CPM_SIOB = 8
   823                          defc __CPM_PRST = 9
   824                          defc __CPM_RCOB = 10
   825                          defc __CPM_ICON = 11
   826                          defc __CPM_VERS = 12
   827                          defc __CPM_RDS  = 13
   828                          defc __CPM_LGIN = 14
   829                          defc __CPM_OPN  = 15
   830                          defc __CPM_CLS  = 16
   831                          defc __CPM_FFST = 17
   832                          defc __CPM_FNXT = 18
   833                          defc __CPM_DEL  = 19
   834                          defc __CPM_READ = 20
   835                          defc __CPM_WRIT = 21
   836                          defc __CPM_MAKE = 22
   837                          defc __CPM_REN  = 23
   838                          defc __CPM_ILOG = 24
   839                          defc __CPM_IDRV = 25
   840                          defc __CPM_SDMA = 26
   841                          defc __CPM_SUID = 32
   842                          defc __CPM_RRAN = 33
   843                          defc __CPM_WRAN = 34
   844                          defc __CPM_CFS  = 35
   845                          defc __CPM_RREC = 36
   846                          defc __CPM_SRDS = 37
   847                          defc __CPM_WRZF = 40
   848                          defc __CPM_DSEG = 51
   849                          
   850                          
   851                          
   852                          
   853                          
   854                          
   855                          
   856                          
   857                          
   858                          
   859                          ENDIF
   860                          
   861                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
    64                          
    65                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                          ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    68                          
    69                          include "../crt_defaults.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_defaults.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                             ; crt configuration
     7                          
     8                             defc DEF__crt_org_code              = 0       ;; org of code section
     9                             defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
    10                             defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
    11                          
    12                             defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
    13                             defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
    14                          
    15                             defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
    16                             defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
    17                          
    18                             defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
    19                          
    20                             defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
    21                          
    22                             defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
    23                             defc DEF__crt_io_vector_base        = 0       ;; io vector base address for z180 internal peripherals
    24                             defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
    25                             defc DEF__crt_interrupt_mode_exit   = -1      ;; if 0-2 crt inserts appropriate im x instruction on exit
    26                          
    27                             defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
    28                             defc DEF__crt_enable_commandline_ex = 0       ;; target specific bits and bits for io redirection and piping
    29                             defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
    30                             defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
    31                          
    32                             defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
    33                             defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
    34                          
    35                             defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
    36                             defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
    37                             defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and 8085 or Z180 target, a jump to user code to service traps is inserted
    38                          
    39                             ; clib defaults
    40                          
    41                             defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
    42                             defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
    43                          
    44                             defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
    45                             defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
    46                          
    47                             defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
    48                          
    49                             defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
    50                             defc DEF__clib_open_max             = 8       ;; max number of open files
    51                          
    52                          ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
    70                          include "crt_config.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/crt_config.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          IF __CRTCFG = -1
     7                          
     8                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9                             ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                             INCLUDE "crt_cfg.inc"
    13                          
    14                          ENDIF
    15                          
    16                          IF __CRTCFG = 0
    17                          
    18                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    19                             ;; cpm ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    20                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    21                          
    22                             defc TAR__crt_org_code              = 256
    23                             defc TAR__crt_org_data              = 0
    24                             defc TAR__crt_org_bss               = 0
    25                          
    26                             defc TAR__crt_model                 = 0
    27                          
    28                             defc TAR__register_sp               = -0x0006
    29                             defc TAR__crt_stack_size            = 512
    30                          
    31                             defc TAR__crt_initialize_bss        = 0
    32                          
    33                             defc TAR__crt_include_preamble      = 0
    34                          
    35                             defc TAR__crt_interrupt_mode        = -1
    36                             defc TAR__crt_interrupt_mode_exit   = -1
    37                          
    38                             defc TAR__crt_enable_commandline    = 3
    39                             defc TAR__crt_enable_commandline_ex = 0
    40                             defc TAR__crt_enable_restart        = 0
    41                             defc TAR__crt_enable_close          = 1
    42                          
    43                             defc TAR__crt_enable_eidi           = 0
    44                             defc TAR__crt_on_exit               = 0x0000
    45                          
    46                             defc TAR__crt_enable_rst            = 0
    47                             defc TAR__crt_enable_nmi            = 0
    48                          
    49                             ; clib defaults
    50                          
    51                             defc TAR__clib_exit_stack_size      = 0
    52                             defc TAR__clib_quickexit_stack_size = 0
    53                          
    54                             defc TAR__clib_malloc_heap_size     = -1
    55                             defc TAR__clib_stdio_heap_size      = 256
    56                          
    57                             defc TAR__clib_balloc_table_size    = 0
    58                          
    59                             defc TAR__clib_fopen_max            = 0
    60                             defc TAR__clib_open_max             = 0
    61                          
    62                          ENDIF
    63                          
    64                          ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    65                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
    71                          
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    75                          
    76                          
    77                             IFDEF CRT_ORG_CODE
    78                          
    79                                defc __crt_org_code = CRT_ORG_CODE
    80                          
    81                             ELSE
    82                          
    83                                IFDEF TAR__crt_org_code
    84                          
    85                                   defc __crt_org_code = TAR__crt_org_code
    86                          
    87                                ELSE
    88                          
    89                                   defc __crt_org_code = DEF__crt_org_code
    90                          
    91                                ENDIF
    92                          
    93                             ENDIF
    94                          
    95                             IFDEF REGISTER_SP
    96                          
    97                                defc __register_sp = REGISTER_SP
    98                          
    99                             ELSE
   100                          
   101                                IFDEF STACKPTR
   102                          
   103                                   defc __register_sp = STACKPTR
   104                          
   105                                ELSE
   106                          
   107                                   IFDEF TAR__register_sp
   108                          
   109                                      defc __register_sp = TAR__register_sp
   110                          
   111                                   ELSE
   112                          
   113                                      defc __register_sp = DEF__register_sp
   114                          
   115                                   ENDIF
   116                          
   117                                ENDIF
   118                          
   119                             ENDIF
   120                          
   121                          
   122                             IFDEF CRT_STACK_SIZE
   123                          
   124                                defc __crt_stack_size = CRT_STACK_SIZE
   125                          
   126                             ELSE
   127                          
   128                                IFDEF TAR__crt_stack_size
   129                          
   130                                   defc __crt_stack_size = TAR__crt_stack_size
   131                          
   132                                ELSE
   133                          
   134                                   defc __crt_stack_size = DEF__crt_stack_size
   135                          
   136                                ENDIF
   137                          
   138                             ENDIF
   139                          
   140                          
   141                             IFDEF CRT_ORG_DATA
   142                          
   143                                defc __crt_org_data = CRT_ORG_DATA
   144                          
   145                             ELSE
   146                          
   147                                IFDEF TAR__crt_org_data
   148                          
   149                                   defc __crt_org_data = TAR__crt_org_data
   150                          
   151                                ELSE
   152                          
   153                                   defc __crt_org_data = DEF__crt_org_data
   154                          
   155                                ENDIF
   156                          
   157                             ENDIF
   158                          
   159                          
   160                             IFDEF CRT_ORG_BSS
   161                          
   162                                defc __crt_org_bss = CRT_ORG_BSS
   163                          
   164                             ELSE
   165                          
   166                                IFDEF TAR__crt_org_bss
   167                          
   168                                   defc __crt_org_bss = TAR__crt_org_bss
   169                          
   170                                ELSE
   171                          
   172                                   defc __crt_org_bss = DEF__crt_org_bss
   173                          
   174                                ENDIF
   175                          
   176                             ENDIF
   177                          
   178                          
   179                             IFDEF CRT_MODEL
   180                          
   181                                defc __crt_model = CRT_MODEL
   182                          
   183                             ELSE
   184                          
   185                                IFDEF TAR__crt_model
   186                          
   187                                   defc __crt_model = TAR__crt_model
   188                          
   189                                ELSE
   190                          
   191                                   defc __crt_model = DEF__crt_model
   192                          
   193                                ENDIF
   194                          
   195                             ENDIF
   196                          
   197                             IFDEF CRT_INITIALIZE_BSS
   198                          
   199                                defc __crt_initialize_bss = CRT_INITIALIZE_BSS
   200                          
   201                             ELSE
   202                          
   203                                IFDEF TAR__crt_initialize_bss
   204                          
   205                                   defc __crt_initialize_bss = TAR__crt_initialize_bss
   206                          
   207                                ELSE
   208                          
   209                                   defc __crt_initialize_bss = DEF__crt_initialize_bss
   210                          
   211                                ENDIF
   212                          
   213                             ENDIF
   214                          
   215                          
   216                             IFDEF CRT_INCLUDE_PREAMBLE
   217                          
   218                                defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
   219                          
   220                             ELSE
   221                          
   222                                IFDEF TAR__crt_include_preamble
   223                          
   224                                   defc __crt_include_preamble = TAR__crt_include_preamble
   225                          
   226                                ELSE
   227                          
   228                                   defc __crt_include_preamble = DEF__crt_include_preamble
   229                          
   230                                ENDIF
   231                          
   232                             ENDIF
   233                          
   234                             IFDEF CRT_ORG_VECTOR_TABLE
   235                          
   236                                defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
   237                          
   238                             ELSE
   239                          
   240                                IFDEF TAR__crt_org_vector_table
   241                          
   242                                   defc __crt_org_vector_table = TAR__crt_org_vector_table
   243                          
   244                                ELSE
   245                          
   246                                   defc __crt_org_vector_table = DEF__crt_org_vector_table
   247                          
   248                                ENDIF
   249                          
   250                             ENDIF
   251                          
   252                          IF __Z180
   253                          
   254                             IFDEF CRT_IO_VECTOR_BASE
   255                          
   256                                defc __crt_io_vector_base = CRT_IO_VECTOR_BASE
   257                          
   258                             ELSE
   259                          
   260                                IFDEF TAR__crt_io_vector_base
   261                          
   262                                   defc __crt_io_vector_base = TAR__crt_io_vector_base
   263                          
   264                                ELSE
   265                          
   266                                   defc __crt_io_vector_base = DEF__crt_io_vector_base
   267                          
   268                                ENDIF
   269                          
   270                             ENDIF
   271                          
   272                          ENDIF
   273                          
   274                             IFDEF CRT_INTERRUPT_MODE
   275                          
   276                                defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
   277                          
   278                             ELSE
   279                          
   280                                IFDEF TAR__crt_interrupt_mode
   281                          
   282                                   defc __crt_interrupt_mode = TAR__crt_interrupt_mode
   283                          
   284                                ELSE
   285                          
   286                                   defc __crt_interrupt_mode = DEF__crt_interrupt_mode
   287                          
   288                                ENDIF
   289                          
   290                             ENDIF
   291                          
   292                          
   293                             IFDEF CRT_INTERRUPT_MODE_EXIT
   294                          
   295                                defc __crt_interrupt_mode_exit = CRT_INTERRUPT_MODE_EXIT
   296                          
   297                             ELSE
   298                          
   299                                IFDEF TAR__crt_interrupt_mode_exit
   300                          
   301                                   defc __crt_interrupt_mode_exit = TAR__crt_interrupt_mode_exit
   302                          
   303                                ELSE
   304                          
   305                                   defc __crt_interrupt_mode_exit = DEF__crt_interrupt_mode_exit
   306                          
   307                                ENDIF
   308                          
   309                             ENDIF
   310                          
   311                          
   312                             IFDEF CRT_ENABLE_COMMANDLINE
   313                          
   314                                defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
   315                          
   316                             ELSE
   317                          
   318                                IFDEF TAR__crt_enable_commandline
   319                          
   320                                   defc __crt_enable_commandline = TAR__crt_enable_commandline
   321                          
   322                                ELSE
   323                          
   324                                   defc __crt_enable_commandline = DEF__crt_enable_commandline
   325                          
   326                                ENDIF
   327                          
   328                             ENDIF
   329                          
   330                          
   331                             IFDEF CRT_ENABLE_COMMANDLINE_EX
   332                          
   333                                defc __crt_enable_commandline_ex = CRT_ENABLE_COMMANDLINE_EX
   334                          
   335                             ELSE
   336                          
   337                                IFDEF TAR__crt_enable_commandline_ex
   338                          
   339                                   defc __crt_enable_commandline_ex = TAR__crt_enable_commandline_ex
   340                          
   341                                ELSE
   342                          
   343                                   defc __crt_enable_commandline_ex = DEF__crt_enable_commandline_ex
   344                          
   345                                ENDIF
   346                          
   347                             ENDIF
   348                          
   349                          
   350                             IFDEF CRT_ENABLE_RESTART
   351                          
   352                                defc __crt_enable_restart = CRT_ENABLE_RESTART
   353                          
   354                             ELSE
   355                          
   356                                IFDEF TAR__crt_enable_restart
   357                          
   358                                   defc __crt_enable_restart = TAR__crt_enable_restart
   359                          
   360                                ELSE
   361                          
   362                                   defc __crt_enable_restart = DEF__crt_enable_restart
   363                          
   364                                ENDIF
   365                          
   366                             ENDIF
   367                          
   368                          
   369                             IFDEF CRT_ENABLE_CLOSE
   370                          
   371                                defc __crt_enable_close = CRT_ENABLE_CLOSE
   372                          
   373                             ELSE
   374                          
   375                                IFDEF TAR__crt_enable_close
   376                          
   377                                   defc __crt_enable_close = TAR__crt_enable_close
   378                          
   379                                ELSE
   380                          
   381                                   defc __crt_enable_close = DEF__crt_enable_close
   382                          
   383                                ENDIF
   384                          
   385                             ENDIF
   386                          
   387                          
   388                             IFDEF CRT_ENABLE_EIDI
   389                          
   390                                defc __crt_enable_eidi = CRT_ENABLE_EIDI
   391                          
   392                             ELSE
   393                          
   394                                IFDEF TAR__crt_enable_eidi
   395                          
   396                                   defc __crt_enable_eidi = TAR__crt_enable_eidi
   397                          
   398                                ELSE
   399                          
   400                                   defc __crt_enable_eidi = DEF__crt_enable_eidi
   401                          
   402                                ENDIF
   403                          
   404                             ENDIF
   405                          
   406                          
   407                             IF __crt_enable_restart
   408                          
   409                                defc __crt_on_exit = 0x10008
   410                          
   411                             ELSE
   412                          
   413                                IFDEF CRT_ON_EXIT
   414                          
   415                                   defc __crt_on_exit = CRT_ON_EXIT
   416                          
   417                                ELSE
   418                          
   419                                   IFDEF TAR__crt_on_exit
   420                          
   421                                      defc __crt_on_exit = TAR__crt_on_exit
   422                          
   423                                   ELSE
   424                          
   425                                      defc __crt_on_exit = DEF__crt_on_exit
   426                          
   427                                   ENDIF
   428                          
   429                                ENDIF
   430                          
   431                             ENDIF
   432                          
   433                          
   434                             IFDEF CLIB_EXIT_STACK_SIZE
   435                          
   436                                defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
   437                          
   438                             ELSE
   439                          
   440                                IFDEF TAR__clib_exit_stack_size
   441                          
   442                                   defc __clib_exit_stack_size = TAR__clib_exit_stack_size
   443                          
   444                                ELSE
   445                          
   446                                   defc __clib_exit_stack_size = DEF__clib_exit_stack_size
   447                          
   448                                ENDIF
   449                          
   450                             ENDIF
   451                          
   452                          
   453                             IFDEF CLIB_QUICKEXIT_STACK_SIZE
   454                          
   455                                defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
   456                          
   457                             ELSE
   458                          
   459                                IFDEF TAR__clib_quickexit_stack_size
   460                          
   461                                   defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
   462                          
   463                                ELSE
   464                          
   465                                   defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
   466                          
   467                                ENDIF
   468                          
   469                             ENDIF
   470                          
   471                          
   472                             IFDEF CLIB_MALLOC_HEAP_SIZE
   473                          
   474                                defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
   475                          
   476                             ELSE
   477                          
   478                                IFDEF TAR__clib_malloc_heap_size
   479                          
   480                                   defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
   481                          
   482                                ELSE
   483                          
   484                                   defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
   485                          
   486                                ENDIF
   487                          
   488                             ENDIF
   489                          
   490                          
   491                             IFDEF CLIB_STDIO_HEAP_SIZE
   492                          
   493                                defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
   494                          
   495                             ELSE
   496                          
   497                                IFDEF TAR__clib_stdio_heap_size
   498                          
   499                                   defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
   500                          
   501                                ELSE
   502                          
   503                                   defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
   504                          
   505                                ENDIF
   506                          
   507                             ENDIF
   508                          
   509                          
   510                             IFDEF CLIB_BALLOC_TABLE_SIZE
   511                          
   512                                defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
   513                          
   514                             ELSE
   515                          
   516                                IFDEF TAR__clib_balloc_table_size
   517                          
   518                                   defc __clib_balloc_table_size = TAR__clib_balloc_table_size
   519                          
   520                                ELSE
   521                          
   522                                   defc __clib_balloc_table_size = DEF__clib_balloc_table_size
   523                          
   524                                ENDIF
   525                          
   526                             ENDIF
   527                          
   528                          
   529                             IFDEF CLIB_FOPEN_MAX
   530                          
   531                                defc __clib_fopen_max = CLIB_FOPEN_MAX
   532                          
   533                             ELSE
   534                          
   535                                IFDEF TAR__clib_fopen_max
   536                          
   537                                   defc __clib_fopen_max = TAR__clib_fopen_max
   538                          
   539                                ELSE
   540                          
   541                                   defc __clib_fopen_max = DEF__clib_fopen_max
   542                          
   543                                ENDIF
   544                          
   545                             ENDIF
   546                          
   547                          
   548                             IFDEF CLIB_OPEN_MAX
   549                          
   550                                defc __clib_open_max = CLIB_OPEN_MAX
   551                          
   552                             ELSE
   553                          
   554                                IFDEF TAR__clib_open_max
   555                          
   556                                   defc __clib_open_max = TAR__clib_open_max
   557                          
   558                                ELSE
   559                          
   560                                   defc __clib_open_max = DEF__clib_open_max
   561                          
   562                                ENDIF
   563                          
   564                             ENDIF
   565                          
   566                          
   567                             IFDEF CRT_ENABLE_RST
   568                          
   569                                defc __crt_enable_rst = CRT_ENABLE_RST
   570                          
   571                             ELSE
   572                          
   573                                IFDEF TAR__crt_enable_rst
   574                          
   575                                   defc __crt_enable_rst = TAR__crt_enable_rst
   576                          
   577                                ELSE
   578                          
   579                                   defc __crt_enable_rst = DEF__crt_enable_rst
   580                          
   581                                ENDIF
   582                          
   583                             ENDIF
   584                          
   585                          
   586                             IFDEF CRT_ENABLE_NMI
   587                          
   588                                defc __crt_enable_nmi = CRT_ENABLE_NMI
   589                          
   590                             ELSE
   591                          
   592                                IFDEF TAR__crt_enable_nmi
   593                          
   594                                   defc __crt_enable_nmi = TAR__crt_enable_nmi
   595                          
   596                                ELSE
   597                          
   598                                   defc __crt_enable_nmi = DEF__crt_enable_nmi
   599                          
   600                                ENDIF
   601                          
   602                             ENDIF
   603                          
   604                          
   605                             IFDEF CRT_ENABLE_TRAP
   606                          
   607                                defc __crt_enable_trap = CRT_ENABLE_TRAP
   608                          
   609                             ELSE
   610                          
   611                                IFDEF TAR__crt_enable_trap
   612                          
   613                                   defc __crt_enable_trap = TAR__crt_enable_trap
   614                          
   615                                ELSE
   616                          
   617                                   defc __crt_enable_trap = DEF__crt_enable_trap
   618                          
   619                                ENDIF
   620                          
   621                             ENDIF
   622                          
   623                          IF __8085
   624                          
   625                             IFDEF CRT_ENABLE_INT55
   626                          
   627                                defc __crt_enable_int55 = CRT_ENABLE_INT55
   628                          
   629                             ELSE
   630                          
   631                                IFDEF TAR__crt_enable_int55
   632                          
   633                                   defc __crt_enable_int55 = TAR__crt_enable_int55
   634                          
   635                                ELSE
   636                          
   637                                   defc __crt_enable_int55 = DEF__crt_enable_int55
   638                          
   639                                ENDIF
   640                          
   641                             ENDIF
   642                          
   643                          
   644                             IFDEF CRT_ENABLE_INT65
   645                          
   646                                defc __crt_enable_int65 = CRT_ENABLE_INT65
   647                          
   648                             ELSE
   649                          
   650                                IFDEF TAR__crt_enable_int65
   651                          
   652                                   defc __crt_enable_int65 = TAR__crt_enable_int65
   653                          
   654                                ELSE
   655                          
   656                                   defc __crt_enable_int65 = DEF__crt_enable_int65
   657                          
   658                                ENDIF
   659                          
   660                             ENDIF
   661                          
   662                          
   663                             IFDEF CRT_ENABLE_INT65
   664                          
   665                                defc __crt_enable_int75 = CRT_ENABLE_INT65
   666                          
   667                             ELSE
   668                          
   669                                IFDEF TAR__crt_enable_int75
   670                          
   671                                   defc __crt_enable_int75 = TAR__crt_enable_int75
   672                          
   673                                ELSE
   674                          
   675                                   defc __crt_enable_int75 = DEF__crt_enable_int75
   676                          
   677                                ENDIF
   678                          
   679                             ENDIF
   680                          
   681                          
   682                             IFDEF CRT_ENABLE_RST40H
   683                          
   684                                defc __crt_enable_rst40h = CRT_ENABLE_RST40H
   685                          
   686                             ELSE
   687                          
   688                                IFDEF TAR__crt_enable_rst40h
   689                          
   690                                   defc __crt_enable_rst40h = TAR__crt_enable_rst40h
   691                          
   692                                ELSE
   693                          
   694                                   defc __crt_enable_rst40h = DEF__crt_enable_rst40h
   695                          
   696                                ENDIF
   697                          
   698                             ENDIF
   699                          
   700                          ENDIF
   701                          
   702                             ;; rules that must be processed by m4
   703                          
   704                          
   705                          
   706                             IFNDEF __crt_include_driver_instantiation
   707                                defc __crt_include_driver_instantiation = 0
   708                             ENDIF
   709                          
   710                             ;; public definitions
   711                          
   712                             PUBLIC __clib_fopen_max
   713                             PUBLIC __clib_open_max
   714                          
   715                             PUBLIC __exit_stack_size
   716                             PUBLIC __quickexit_stack_size
   717                          
   718                             defc __exit_stack_size = __clib_exit_stack_size
   719                             defc __quickexit_stack_size = __clib_quickexit_stack_size
   720                          
   721                             IF __Z180
   722                          
   723                                PUBLIC __IO_VECTOR_BASE
   724                          
   725                                IF __crt_io_vector_base < 0
   726                          
   727                                   IF (__crt_org_vector_table < 0)
   728                          
   729                                      IF (-__crt_org_vector_table) & 0x1f
   730                          
   731                                         "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
   732                          
   733                                      ELSE
   734                          
   735                                         defc __IO_VECTOR_BASE = (-__crt_org_vector_table) & 0xe0
   736                          
   737                                      ENDIF
   738                          
   739                                   ELSE
   740                          
   741                                      IF __crt_org_vector_table & 0x1f
   742                          
   743                                         "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
   744                          
   745                                      ELSE
   746                          
   747                                         defc __IO_VECTOR_BASE = __crt_org_vector_table & 0xe0
   748                          
   749                                      ENDIF
   750                          
   751                                   ENDIF
   752                          
   753                                ELSE
   754                          
   755                                   IF __crt_io_vector_base & 0x1f
   756                          
   757                                      "Illegal __IO_VECTOR_BASE"
   758                          
   759                                   ELSE
   760                          
   761                                      defc __IO_VECTOR_BASE = __crt_io_vector_base & 0xe0
   762                          
   763                                   ENDIF
   764                          
   765                                ENDIF
   766                          
   767                             ENDIF
   768                          
   769                          ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   770                          
   771                          
   772                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   773                          ;; crt rules for cpm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   774                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   775                          
   776                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   777                             ; Input Terminal Settings
   778                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   779                          
   780                             IFNDEF CRT_ITERM_TERMINAL_FLAGS
   781                                defc CRT_ITERM_TERMINAL_FLAGS = 0x03b0
   782                             ENDIF
   783                          
   784                             ; buffer size must be available to m4 (requires special case in zcc)
   785                          
   786                          
   787                          
   788                             IFNDEF CRT_ITERM_EDIT_BUFFER_SIZE
   789                                defc CRT_ITERM_EDIT_BUFFER_SIZE = 64
   790                             ENDIF
   791                          
   792                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   793                             ; Output Terminal Settings
   794                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   795                          
   796                             IFNDEF CRT_OTERM_TERMINAL_FLAGS
   797                                defc CRT_OTERM_TERMINAL_FLAGS = 0x2370
   798                             ENDIF
   799                          
   800                          ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   801                          
   802                          
   803                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   804                          ;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   805                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   806                          
   807                          
   808                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   809                          ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   810                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   811                          
   812                          IF __MMAP = -1
   813                          
   814                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   815                             ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   816                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   817                          
   818                          
   819                          
   820                             SECTION UNASSIGNED
   821                             org 0
   822                          
   823                          ENDIF
   824                          
   825                          IF __MMAP = 0
   826                          
   827                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   828                             ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
   829                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   830                          
   831                             INCLUDE "../crt_memory_model_z80.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     7                          
     8                          SECTION CODE
     9                          
    10                          org __crt_org_code
    11                          
    12                          IF (__crt_org_vector_table = -0x80) || (__crt_org_vector_table = -0x100)
    13                          
    14                          section code_crt_interrupt_vector_table
    15                          section code_crt_start
    16                          
    17                          ENDIF
    18                          
    19                          section code_crt_init
    20                          section code_crt_init_exit
    21                          section code_crt_main
    22                          section code_crt_exit
    23                          section code_crt_exit_exit
    24                          section code_crt_return
    25                          section code_crt_common
    26                          
    27                          IF (__crt_org_vector_table) && (__crt_org_vector_table != -0x80) && (__crt_org_vector_table != -0x100)
    28                          
    29                          section code_crt_interrupt_vector_table
    30                          
    31                          ENDIF
    32                          
    33                          section code_driver
    34                          section code_font
    35                          section code_clib
    36                            include "../../clib_code.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../../clib_code.inc:
     1                          
     2                          ;; clib code segments ;;;;;;;;;
     3                          
     4                          section code_adt_b_array
     5                          section code_adt_b_vector
     6                          section code_adt_ba_priority_queue
     7                          section code_adt_ba_stack
     8                          section code_adt_bv_priority_queue
     9                          section code_adt_bv_stack
    10                          section code_adt_p_forward_list
    11                          section code_adt_p_forward_list_alt
    12                          section code_adt_p_list
    13                          section code_adt_p_queue
    14                          section code_adt_p_stack
    15                          section code_adt_w_array
    16                          section code_adt_w_vector
    17                          section code_adt_wa_priority_queue
    18                          section code_adt_wa_stack
    19                          section code_adt_wv_priority_queue
    20                          section code_adt_wv_stack
    21                          section code_alloc_balloc
    22                          section code_alloc_malloc
    23                          section code_alloc_obstack
    24                          section code_arch
    25                          section code_bifrost_h
    26                          section code_bifrost_l
    27                          section code_bifrost2
    28                          section code_compress_aplib
    29                          section code_compress_zx7
    30                          section code_compress_zx0
    31                          section code_compress_zx1
    32                          section code_compress_zx2
    33                          section code_ctype
    34                          section code_driver_general
    35                          section code_driver_character_input
    36                          section code_driver_character_output
    37                          section code_driver_memstream
    38                          section code_driver_terminal_input
    39                          section code_driver_terminal_output
    40                          section code_driver_tty
    41                          section code_env
    42                          section code_error
    43                          section code_esxdos
    44                          section code_fcntl
    45                          section code_font_fzx
    46                          section code_fp_am9511
    47                          section code_fp_math48
    48                          section code_fp_math32
    49                          section code_fp_math16
    50                          section code_fp_mbf32
    51                          section code_im2
    52                          section code_input
    53                          section code_inttypes
    54                          section code_l
    55                          section code_l_sccz80
    56                          section code_l_sdcc
    57                          section code_l_clang
    58                          section code_locale
    59                          section code_math
    60                          section code_network
    61                          section code_nirvanam
    62                          section code_nirvanap
    63                          section code_PSGlib
    64                          section code_setjmp
    65                          section code_SMSlib
    66                          section code_sound_bit
    67                          section code_sound_ay
    68                          section code_stdio
    69                          section code_stdlib
    70                          section code_string
    71                          section code_temp_sp1
    72                          section code_threads
    73                          section code_threads_mutex
    74                          section code_time
    75                          section code_z180
    76                          section code_z80
    77                          
    78                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    79                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
    37                          section code_lib
    38                          section code_home
    39                          section code_compiler
    40                          section code_user
    41                          
    42                          section rodata_align_256
    43                          align 256
    44                          
    45                          section rodata_align_128
    46                          align 128
    47                          
    48                          section rodata_align_64
    49                          align 64
    50                          
    51                          section rodata_align_32
    52                          align 32
    53                          
    54                          section rodata_align_16
    55                          align 16
    56                          
    57                          section rodata_align_8
    58                          align 8
    59                          
    60                          section rodata_align_4
    61                          align 4
    62                          
    63                          section rodata_align_2
    64                          align 2
    65                          
    66                          section rodata_driver
    67                          section rodata_font
    68                          section rodata_clib
    69                            include "../../clib_rodata.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../../clib_rodata.inc:
     1                          
     2                          ;; clib rodata segments ;;;;;;;
     3                          
     4                          section rodata_align_256
     5                          section rodata_align_128
     6                          section rodata_align_64
     7                          section rodata_align_32
     8                          section rodata_align_16
     9                          section rodata_align_8
    10                          section rodata_align_4
    11                          section rodata_align_2
    12                          section rodata_arch
    13                          section rodata_env
    14                          section rodata_error_strings
    15                          section rodata_error_string_end
    16  0000  00                defb 0
    17                          section rodata_fcntl
    18                          section rodata_font_4x8
    19                          section rodata_font_8x8
    20                          section rodata_font_fzx
    21                          section rodata_fp_am9511
    22                          section rodata_fp_math48
    23                          section rodata_fp_math32
    24                          section rodata_fp_math16
    25                          section rodata_fp_mbf32
    26                          section rodata_input
    27                          section rodata_SMSlib
    28                          section rodata_sound_ay
    29                          section rodata_sound_bit
    30                          section rodata_stdio
    31                          section rodata_stdlib
    32                          
    33                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    34                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
    70                            ;;section rodata_error_strings
    71                            ;;section rodata_error_string_end
    72                            ;;defb 0
    73                          section rodata_lib
    74                          section rodata_compiler
    75                          section rodata_user
    76                          
    77                          SECTION CODE_END
    78                          
    79                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    80                          
    81                          SECTION DATA
    82                          
    83                          IF __crt_org_data
    84                          
    85                             org __crt_org_data
    86                          
    87                          ELSE
    88                          
    89                             IF __crt_model
    90                          
    91                                "DATA section address must be specified for rom models"
    92                          
    93                             ENDIF
    94                          
    95                          ENDIF
    96                          
    97                          section data_align_256
    98                          align 256
    99                          
   100                          section data_align_128
   101                          align 128
   102                          
   103                          section data_align_64
   104                          align 64
   105                          
   106                          section data_align_32
   107                          align 32
   108                          
   109                          section data_align_16
   110                          align 16
   111                          
   112                          section data_align_8
   113                          align 8
   114                          
   115                          section data_align_4
   116                          align 4
   117                          
   118                          section data_align_2
   119                          align 2
   120                          
   121                          section smc_jump_vectors
   122                          section smc_driver
   123                          section smc_font
   124                          section smc_clib
   125                            include "../../clib_smc.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../../clib_smc.inc:
     1                          
     2                          ;; clib self-modifying code ;;;
     3                          
     4                          section smc_fcntl
     5                          section smc_l
     6                          section smc_sound_bit
     7                          section smc_sound_ay
     8                          section smc_compress
     9                          
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
   126                          section smc_lib
   127                          section smc_compiler
   128                          section smc_user
   129                          
   130                          section data_crt
   131                          section data_driver
   132                          section data_font
   133                          section data_clib
   134                            include "../../clib_data.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../../clib_data.inc:
     1                          
     2                          ;; clib data segments ;;;;;;;;;
     3                          
     4                          section data_alloc_balloc
     5                          section data_alloc_malloc
     6                          section data_arch
     7                          section data_fcntl
     8                          section data_fcntl_stdio_heap_head
     9                          section data_fcntl_stdio_heap_body
    10                          section data_fcntl_stdio_heap_tail
    11                          section data_fcntl_fdtable_body
    12                          section data_fp_mbf32
    13                          section data_PSGlib
    14                          section data_SMSlib
    15                          section data_sound_bit
    16                          section data_sound_ay
    17                          section data_stdio
    18                          section data_stdlib
    19                          section data_threads
    20                          
    21                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    22                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
   135                            ;;section data_fcntl_stdio_heap_head
   136                            ;;section data_fcntl_stdio_heap_body
   137                            ;;section data_fcntl_stdio_heap_tail
   138                            ;;section data_fcntl_fdtable_body
   139                          section data_lib
   140                          section data_compiler
   141                          section data_user
   142                          
   143                          SECTION DATA_END
   144                          
   145                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   146                          
   147                          SECTION BSS
   148                          
   149                          IF __crt_org_bss
   150                          
   151                             org __crt_org_bss
   152                          
   153                          ELSE
   154                          
   155                             IF __crt_model
   156                          
   157                                org -1
   158                          
   159                             ENDIF
   160                          
   161                          ENDIF
   162                          
   163                          section bss_align_256
   164                          align 256
   165                          
   166                          section bss_align_128
   167                          align 128
   168                          
   169                          section bss_align_64
   170                          align 64
   171                          
   172                          section bss_align_32
   173                          align 32
   174                          
   175                          section bss_align_16
   176                          align 16
   177                          
   178                          section bss_align_8
   179                          align 8
   180                          
   181                          section bss_align_4
   182                          align 4
   183                          
   184                          section bss_align_2
   185                          align 2
   186                          
   187                          section bss_crt
   188                          section bss_driver
   189                          section bss_font
   190                          section bss_clib
   191                            include "../../clib_bss.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../../clib_bss.inc:
     1                          
     2                          ;; clib bss segments ;;;;;;;;;;
     3                          
     4                          section bss_arch
     5                          section bss_alloc_balloc
     6                          section bss_alloc_malloc
     7                          section bss_compress_aplib
     8                          section bss_error
     9                          section bss_env
    10                          section bss_esxdos
    11                          section bss_fcntl
    12                          section bss_fp_am9511
    13                          section bss_fp_math48
    14                          section bss_fp_math32
    15                          section bss_fp_math16
    16                          section bss_fp_mbf32
    17                          section bss_input
    18                          section bss_PSGlib
    19                          section bss_SMSlib
    20                          section bss_sound_bit
    21                          section bss_sound_ay
    22                          section bss_stdio
    23                          section bss_stdlib
    24                          section bss_string
    25                          
    26                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    27                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_memory_model_z80.inc:
   192                          section bss_lib
   193                          section bss_compiler
   194                          section bss_user
   195                          
   196                          section BSS_UNINITIALIZED
   197                          SECTION BSS_END
   198                          
   199                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   200                          
   201                          IF (__crt_org_vector_table = 0)
   202                          
   203                          section code_crt_interrupt_vector_table
   204                          org 0
   205                          
   206                          ENDIF
   207                          
   208                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   209                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
   832                          
   833                          
   834                          
   835                             SECTION UNASSIGNED
   836                             org 0
   837                          
   838                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   839                          
   840                          ENDIF
   841                          
   842                          ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   843                          
   844                          
   845                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   846                          ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   847                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   848                          
   849                          
   850                          ; When FILEs and FDSTRUCTs are instantiated labels are assigned
   851                          ; to point at created structures.
   852                          ;
   853                          ; The label formats are:
   854                          ;
   855                          ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
   856                          ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
   857                          ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
   858                          
   859                          
   860                          
   861                          
   862                          
   863                          
   864                          
   865                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   866                             ; FILE  : _stdin
   867                             ;
   868                             ; driver: cpm_00_input_cons
   869                             ; fd    : 0
   870                             ; mode  : read only
   871                             ; type  : 001 = input terminal
   872                             ;
   873                             ; ioctl_flags   : 0x0100
   874                             ; buffer size   : 64 + 1 bytes (max 255)
   875                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   876                          
   877                          
   878                             SECTION data_clib
   879                             SECTION data_stdio
   880                          
   881                             ; FILE *
   882                          
   883                             PUBLIC _stdin
   884                          
   885  0000  0400                 _stdin:  defw __i_stdio_file_0 + 2
   886                          
   887                             ; FILE structure
   888                          
   889                             __i_stdio_file_0:
   890                          
   891                                ; open files link
   892                          
   893  0002  0000                    defw 0
   894                          
   895                                ; jump to underlying fd
   896                          
   897  0004  c3                      defb 195
   898  0005  0600                    defw __i_fcntl_fdstruct_0
   899                          
   900                                ; state_flags_0
   901                                ; state_flags_1
   902                                ; conversion flags
   903                                ; ungetc
   904                          
   905  0007  40                      defb 0x40      ; read + stdio manages ungetc + normal file type
   906  0008  02                      defb 0x02      ; last operation was read
   907  0009  00                      defb 0
   908  000a  00                      defb 0
   909                          
   910                                ; mtx_recursive
   911                          
   912  000b  00                      defb 0         ; thread owner = none
   913  000c  02                      defb 0x02      ; mtx_recursive
   914  000d  00                      defb 0         ; lock count = 0
   915  000e  fe                      defb 0xfe      ; atomic spinlock
   916  000f  0000                    defw 0         ; list of blocked threads
   917                          
   918                          
   919                             ; fd table entry
   920                          
   921                             SECTION data_fcntl_fdtable_body
   922  0000  0600                 defw __i_fcntl_fdstruct_0
   923                          
   924                             ; FDSTRUCT structure
   925                          
   926                             SECTION data_fcntl_stdio_heap_body
   927                          
   928                             EXTERN console_01_input_terminal_fdriver
   929                             EXTERN cpm_00_input_cons
   930                          
   931                             __i_fcntl_heap_0:
   932                          
   933                                ; heap header
   934                          
   935  0000  5b00                    defw __i_fcntl_heap_1
   936  0002  5d00                    defw 93
   937  0004  0000                    defw 0
   938                          
   939                             __i_fcntl_fdstruct_0:
   940                          
   941                                ; FDSTRUCT structure
   942                          
   943                                ; call to first entry to driver
   944                          
   945  0006  cd                      defb 205
   946  0007  0000                    defw console_01_input_terminal_fdriver
   947                          
   948                                ; jump to driver
   949                          
   950  0009  c3                      defb 195
   951  000a  0000                    defw cpm_00_input_cons
   952                          
   953                                ; flags
   954                                ; reference_count
   955                                ; mode_byte
   956                          
   957  000c  01                      defb 0x01      ; stdio handles ungetc + type = input terminal
   958  000d  02                      defb 2
   959  000e  01                      defb 0x01      ; read only
   960                          
   961                                ; ioctl_flags
   962                          
   963  000f  0001                    defw 0x0100
   964                          
   965                                ; mtx_plain
   966                          
   967  0011  00                      defb 0         ; thread owner = none
   968  0012  01                      defb 0x01      ; mtx_plain
   969  0013  00                      defb 0         ; lock count = 0
   970  0014  fe                      defb 0xfe      ; atomic spinlock
   971  0015  0000                    defw 0         ; list of blocked threads
   972                          
   973                                ; index
   974                                ; max_size
   975                                ; len
   976                          
   977  0017  ff                      defb 255
   978  0018  40                      defb 64
   979  0019  00                      defb 0
   980                          
   981                                ; buffer
   982                          
   983  001a  0000000000000000        defs 65
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              00                
   984                          
   985                          
   986                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   987                          
   988                          
   989                          
   990                          
   991                          
   992                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   993                             ; FILE  : _stdout
   994                             ;
   995                             ; driver: cpm_00_output_cons
   996                             ; fd    : 1
   997                             ; mode  : write only
   998                             ; type  : 002 = output terminal
   999                             ;
  1000                             ; ioctl_flags   : 0x0010
  1001                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1002                          
  1003                          
  1004                             SECTION data_clib
  1005                             SECTION data_stdio
  1006                          
  1007                             ; FILE *
  1008                          
  1009                             PUBLIC _stdout
  1010                          
  1011  0011  1500                 _stdout:  defw __i_stdio_file_1 + 2
  1012                          
  1013                             ; FILE structure
  1014                          
  1015                             __i_stdio_file_1:
  1016                          
  1017                                ; open files link
  1018                          
  1019  0013  0200                    defw __i_stdio_file_0
  1020                          
  1021                                ; jump to underlying fd
  1022                          
  1023  0015  c3                      defb 195
  1024  0016  6100                    defw __i_fcntl_fdstruct_1
  1025                          
  1026                                ; state_flags_0
  1027                                ; state_flags_1
  1028                                ; conversion flags
  1029                                ; ungetc
  1030                          
  1031  0018  80                      defb 0x80         ; write + normal file type
  1032  0019  00                      defb 0            ; last operation was write
  1033  001a  00                      defb 0
  1034  001b  00                      defb 0
  1035                          
  1036                                ; mtx_recursive
  1037                          
  1038  001c  00                      defb 0         ; thread owner = none
  1039  001d  02                      defb 0x02      ; mtx_recursive
  1040  001e  00                      defb 0         ; lock count = 0
  1041  001f  fe                      defb 0xfe      ; atomic spinlock
  1042  0020  0000                    defw 0         ; list of blocked threads
  1043                          
  1044                          
  1045                             ; fd table entry
  1046                          
  1047                             SECTION data_fcntl_fdtable_body
  1048  0002  6100                 defw __i_fcntl_fdstruct_1
  1049                          
  1050                             ; FDSTRUCT structure
  1051                          
  1052                             SECTION data_fcntl_stdio_heap_body
  1053                          
  1054                             EXTERN console_01_output_terminal_fdriver
  1055                             EXTERN cpm_00_output_cons
  1056                          
  1057                             __i_fcntl_heap_1:
  1058                          
  1059                                ; heap header
  1060                          
  1061  005b  7200                    defw __i_fcntl_heap_2
  1062  005d  1700                    defw 23
  1063  005f  0000                    defw __i_fcntl_heap_0
  1064                          
  1065                             __i_fcntl_fdstruct_1:
  1066                          
  1067                                ; FDSTRUCT structure
  1068                          
  1069                                ; call to first entry to driver
  1070                          
  1071  0061  cd                      defb 205
  1072  0062  0000                    defw console_01_output_terminal_fdriver
  1073                          
  1074                                ; jump to driver
  1075                          
  1076  0064  c3                      defb 195
  1077  0065  0000                    defw cpm_00_output_cons
  1078                          
  1079                                ; flags
  1080                                ; reference_count
  1081                                ; mode_byte
  1082                          
  1083  0067  02                      defb 0x02      ; type = output terminal
  1084  0068  02                      defb 2
  1085  0069  02                      defb 0x02      ; write only
  1086                          
  1087                                ; ioctl_flags
  1088                          
  1089  006a  1000                    defw 0x0010
  1090                          
  1091                                ; mtx_plain
  1092                          
  1093  006c  00                      defb 0         ; thread owner = none
  1094  006d  01                      defb 0x01      ; mtx_plain
  1095  006e  00                      defb 0         ; lock count = 0
  1096  006f  fe                      defb 0xfe      ; atomic spinlock
  1097  0070  0000                    defw 0         ; list of blocked threads
  1098                          
  1099                          
  1100                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1101                          
  1102                          
  1103                          
  1104                          
  1105                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1106                             ; DUPED FILE DESCRIPTOR
  1107                             ;
  1108                             ; FILE  : _stderr
  1109                             ; flags : 0x80
  1110                             ;
  1111                             ; fd    : 2
  1112                             ; dup fd: __i_fcntl_fdstruct_1
  1113                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1114                          
  1115                          
  1116                             SECTION data_clib
  1117                             SECTION data_stdio
  1118                          
  1119                             ; FILE *
  1120                          
  1121                             PUBLIC _stderr
  1122                          
  1123  0022  2600                 _stderr:  defw __i_stdio_file_2 + 2
  1124                          
  1125                             ; FILE structure
  1126                          
  1127                             __i_stdio_file_2:
  1128                          
  1129                                ; open files link
  1130                          
  1131  0024  1300                    defw __i_stdio_file_1
  1132                          
  1133                                ; jump to duped fd
  1134                          
  1135  0026  c3                      defb 195
  1136  0027  6100                    defw __i_fcntl_fdstruct_1
  1137                          
  1138                                ; state_flags_0
  1139                                ; state_flags_1
  1140                                ; conversion flags
  1141                                ; ungetc
  1142                          
  1143  0029  80                      defb 0x80
  1144  002a  00                      defb 0
  1145  002b  00                      defb 0
  1146  002c  00                      defb 0
  1147                          
  1148                                ; mtx_recursive
  1149                          
  1150  002d  00                      defb 0         ; thread owner = none
  1151  002e  02                      defb 0x02      ; mtx_recursive
  1152  002f  00                      defb 0         ; lock count = 0
  1153  0030  fe                      defb 0xfe      ; atomic spinlock
  1154  0031  0000                    defw 0         ; list of blocked threads
  1155                          
  1156                          
  1157                             ; fd table entry
  1158                          
  1159                             SECTION data_fcntl_fdtable_body
  1160  0004  6100                 defw __i_fcntl_fdstruct_1
  1161                          
  1162                             ; FDSTRUCT structure
  1163                          
  1164                             defc __i_fcntl_fdstruct_2 = __i_fcntl_fdstruct_1
  1165                          
  1166                             ; adjust reference count on duped FDSTRUCT
  1167                          
  1168                             SECTION code_crt_init
  1169                          
  1170  0000  216800               ld hl,__i_fcntl_fdstruct_1 + 7     ; & FDSTRUCT.ref_count
  1171  0003  34                   inc (hl)
  1172  0004  34                   inc (hl)
  1173                          
  1174                          
  1175                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1176                          
  1177                          
  1178                          
  1179                          
  1180                          
  1181                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1182                             ; FILE  : _stdrdr
  1183                             ;
  1184                             ; driver: cpm_00_input_reader
  1185                             ; fd    : 3
  1186                             ; mode  : read only
  1187                             ; type  : 003 = character input
  1188                             ;
  1189                             ; ioctl_flags   : 0x0100
  1190                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1191                          
  1192                          
  1193                             SECTION data_clib
  1194                             SECTION data_stdio
  1195                          
  1196                             ; FILE *
  1197                          
  1198                             PUBLIC _stdrdr
  1199                          
  1200  0033  3700                 _stdrdr:  defw __i_stdio_file_3 + 2
  1201                          
  1202                             ; FILE structure
  1203                          
  1204                             __i_stdio_file_3:
  1205                          
  1206                                ; open files link
  1207                          
  1208  0035  2400                    defw __i_stdio_file_2
  1209                          
  1210                                ; jump to underlying fd
  1211                          
  1212  0037  c3                      defb 195
  1213  0038  7800                    defw __i_fcntl_fdstruct_3
  1214                          
  1215                                ; state_flags_0
  1216                                ; state_flags_1
  1217                                ; conversion flags
  1218                                ; ungetc
  1219                          
  1220  003a  40                      defb 0x40      ; read + stdio manages ungetc + normal file type
  1221  003b  02                      defb 0x02      ; last operation was read
  1222  003c  00                      defb 0
  1223  003d  00                      defb 0
  1224                          
  1225                                ; mtx_recursive
  1226                          
  1227  003e  00                      defb 0         ; thread owner = none
  1228  003f  02                      defb 0x02      ; mtx_recursive
  1229  0040  00                      defb 0         ; lock count = 0
  1230  0041  fe                      defb 0xfe      ; atomic spinlock
  1231  0042  0000                    defw 0         ; list of blocked threads
  1232                          
  1233                          
  1234                             ; fd table entry
  1235                          
  1236                             SECTION data_fcntl_fdtable_body
  1237  0006  7800                 defw __i_fcntl_fdstruct_3
  1238                          
  1239                             ; FDSTRUCT structure
  1240                          
  1241                             SECTION data_fcntl_stdio_heap_body
  1242                          
  1243                             EXTERN console_01_input_terminal_fdriver
  1244                             EXTERN cpm_00_input_reader
  1245                          
  1246                             __i_fcntl_heap_2:
  1247                          
  1248                                ; heap header
  1249                          
  1250  0072  8900                    defw __i_fcntl_heap_3
  1251  0074  1700                    defw 23
  1252  0076  5b00                    defw __i_fcntl_heap_1
  1253                          
  1254                             __i_fcntl_fdstruct_3:
  1255                          
  1256                                ; FDSTRUCT structure
  1257                          
  1258                                ; call to first entry to driver
  1259                          
  1260  0078  cd                      defb 205
  1261  0079  0000                    defw console_01_input_terminal_fdriver
  1262                          
  1263                                ; jump to driver
  1264                          
  1265  007b  c3                      defb 195
  1266  007c  0000                    defw cpm_00_input_reader
  1267                          
  1268                                ; flags
  1269                                ; reference_count
  1270                                ; mode_byte
  1271                          
  1272  007e  03                      defb 0x03      ; stdio handles ungetc + type = character input
  1273  007f  02                      defb 2
  1274  0080  01                      defb 0x01      ; read only
  1275                          
  1276                                ; ioctl_flags
  1277                          
  1278  0081  0001                    defw 0x0100
  1279                          
  1280                                ; mtx_plain
  1281                          
  1282  0083  00                      defb 0         ; thread owner = none
  1283  0084  01                      defb 0x01      ; mtx_plain
  1284  0085  00                      defb 0         ; lock count = 0
  1285  0086  fe                      defb 0xfe      ; atomic spinlock
  1286  0087  0000                    defw 0         ; list of blocked threads
  1287                          
  1288                          
  1289                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1290                          
  1291                          
  1292                          
  1293                          
  1294                          
  1295                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1296                             ; FILE  : _stdpun
  1297                             ;
  1298                             ; driver: cpm_00_output_punch
  1299                             ; fd    : 4
  1300                             ; mode  : write only
  1301                             ; type  : 004 = character output
  1302                             ;
  1303                             ; ioctl_flags   : 0x0010
  1304                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1305                          
  1306                          
  1307                             SECTION data_clib
  1308                             SECTION data_stdio
  1309                          
  1310                             ; FILE *
  1311                          
  1312                             PUBLIC _stdpun
  1313                          
  1314  0044  4800                 _stdpun:  defw __i_stdio_file_4 + 2
  1315                          
  1316                             ; FILE structure
  1317                          
  1318                             __i_stdio_file_4:
  1319                          
  1320                                ; open files link
  1321                          
  1322  0046  3500                    defw __i_stdio_file_3
  1323                          
  1324                                ; jump to underlying fd
  1325                          
  1326  0048  c3                      defb 195
  1327  0049  8f00                    defw __i_fcntl_fdstruct_4
  1328                          
  1329                                ; state_flags_0
  1330                                ; state_flags_1
  1331                                ; conversion flags
  1332                                ; ungetc
  1333                          
  1334  004b  80                      defb 0x80         ; write + normal file type
  1335  004c  00                      defb 0            ; last operation was write
  1336  004d  00                      defb 0
  1337  004e  00                      defb 0
  1338                          
  1339                                ; mtx_recursive
  1340                          
  1341  004f  00                      defb 0         ; thread owner = none
  1342  0050  02                      defb 0x02      ; mtx_recursive
  1343  0051  00                      defb 0         ; lock count = 0
  1344  0052  fe                      defb 0xfe      ; atomic spinlock
  1345  0053  0000                    defw 0         ; list of blocked threads
  1346                          
  1347                          
  1348                             ; fd table entry
  1349                          
  1350                             SECTION data_fcntl_fdtable_body
  1351  0008  8f00                 defw __i_fcntl_fdstruct_4
  1352                          
  1353                             ; FDSTRUCT structure
  1354                          
  1355                             SECTION data_fcntl_stdio_heap_body
  1356                          
  1357                             EXTERN console_01_output_terminal_fdriver
  1358                             EXTERN cpm_00_output_punch
  1359                          
  1360                             __i_fcntl_heap_3:
  1361                          
  1362                                ; heap header
  1363                          
  1364  0089  a000                    defw __i_fcntl_heap_4
  1365  008b  1700                    defw 23
  1366  008d  7200                    defw __i_fcntl_heap_2
  1367                          
  1368                             __i_fcntl_fdstruct_4:
  1369                          
  1370                                ; FDSTRUCT structure
  1371                          
  1372                                ; call to first entry to driver
  1373                          
  1374  008f  cd                      defb 205
  1375  0090  0000                    defw console_01_output_terminal_fdriver
  1376                          
  1377                                ; jump to driver
  1378                          
  1379  0092  c3                      defb 195
  1380  0093  0000                    defw cpm_00_output_punch
  1381                          
  1382                                ; flags
  1383                                ; reference_count
  1384                                ; mode_byte
  1385                          
  1386  0095  04                      defb 0x04      ; type = character output
  1387  0096  02                      defb 2
  1388  0097  02                      defb 0x02      ; write only
  1389                          
  1390                                ; ioctl_flags
  1391                          
  1392  0098  1000                    defw 0x0010
  1393                          
  1394                                ; mtx_plain
  1395                          
  1396  009a  00                      defb 0         ; thread owner = none
  1397  009b  01                      defb 0x01      ; mtx_plain
  1398  009c  00                      defb 0         ; lock count = 0
  1399  009d  fe                      defb 0xfe      ; atomic spinlock
  1400  009e  0000                    defw 0         ; list of blocked threads
  1401                          
  1402                          
  1403                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1404                          
  1405                          
  1406                          
  1407                          
  1408                          
  1409                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1410                             ; FILE  : _stdlst
  1411                             ;
  1412                             ; driver: cpm_00_output_list
  1413                             ; fd    : 5
  1414                             ; mode  : write only
  1415                             ; type  : 004 = character output
  1416                             ;
  1417                             ; ioctl_flags   : 0x0010
  1418                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1419                          
  1420                          
  1421                             SECTION data_clib
  1422                             SECTION data_stdio
  1423                          
  1424                             ; FILE *
  1425                          
  1426                             PUBLIC _stdlst
  1427                          
  1428  0055  5900                 _stdlst:  defw __i_stdio_file_5 + 2
  1429                          
  1430                             ; FILE structure
  1431                          
  1432                             __i_stdio_file_5:
  1433                          
  1434                                ; open files link
  1435                          
  1436  0057  4600                    defw __i_stdio_file_4
  1437                          
  1438                                ; jump to underlying fd
  1439                          
  1440  0059  c3                      defb 195
  1441  005a  a600                    defw __i_fcntl_fdstruct_5
  1442                          
  1443                                ; state_flags_0
  1444                                ; state_flags_1
  1445                                ; conversion flags
  1446                                ; ungetc
  1447                          
  1448  005c  80                      defb 0x80         ; write + normal file type
  1449  005d  00                      defb 0            ; last operation was write
  1450  005e  00                      defb 0
  1451  005f  00                      defb 0
  1452                          
  1453                                ; mtx_recursive
  1454                          
  1455  0060  00                      defb 0         ; thread owner = none
  1456  0061  02                      defb 0x02      ; mtx_recursive
  1457  0062  00                      defb 0         ; lock count = 0
  1458  0063  fe                      defb 0xfe      ; atomic spinlock
  1459  0064  0000                    defw 0         ; list of blocked threads
  1460                          
  1461                          
  1462                             ; fd table entry
  1463                          
  1464                             SECTION data_fcntl_fdtable_body
  1465  000a  a600                 defw __i_fcntl_fdstruct_5
  1466                          
  1467                             ; FDSTRUCT structure
  1468                          
  1469                             SECTION data_fcntl_stdio_heap_body
  1470                          
  1471                             EXTERN console_01_output_terminal_fdriver
  1472                             EXTERN cpm_00_output_list
  1473                          
  1474                             __i_fcntl_heap_4:
  1475                          
  1476                                ; heap header
  1477                          
  1478  00a0  b700                    defw __i_fcntl_heap_5
  1479  00a2  1700                    defw 23
  1480  00a4  8900                    defw __i_fcntl_heap_3
  1481                          
  1482                             __i_fcntl_fdstruct_5:
  1483                          
  1484                                ; FDSTRUCT structure
  1485                          
  1486                                ; call to first entry to driver
  1487                          
  1488  00a6  cd                      defb 205
  1489  00a7  0000                    defw console_01_output_terminal_fdriver
  1490                          
  1491                                ; jump to driver
  1492                          
  1493  00a9  c3                      defb 195
  1494  00aa  0000                    defw cpm_00_output_list
  1495                          
  1496                                ; flags
  1497                                ; reference_count
  1498                                ; mode_byte
  1499                          
  1500  00ac  04                      defb 0x04      ; type = character output
  1501  00ad  02                      defb 2
  1502  00ae  02                      defb 0x02      ; write only
  1503                          
  1504                                ; ioctl_flags
  1505                          
  1506  00af  1000                    defw 0x0010
  1507                          
  1508                                ; mtx_plain
  1509                          
  1510  00b1  00                      defb 0         ; thread owner = none
  1511  00b2  01                      defb 0x01      ; mtx_plain
  1512  00b3  00                      defb 0         ; lock count = 0
  1513  00b4  fe                      defb 0xfe      ; atomic spinlock
  1514  00b5  0000                    defw 0         ; list of blocked threads
  1515                          
  1516                          
  1517                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1518                          
  1519                          
  1520                          
  1521                          
  1522                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1523                             ;; create open and closed FILE lists
  1524                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1525                          
  1526                             ; __clib_fopen_max   = max number of open FILEs specified by user
  1527                             ; 6 = number of static FILEs instantiated in crt
  1528                             ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
  1529                          
  1530                          	PUBLIC __MAX_FOPEN
  1531                          
  1532                             SECTION data_clib
  1533                             SECTION data_stdio
  1534                          
  1535                             IF (__clib_fopen_max > 0) || (6 > 0)
  1536                          
  1537                                ; number of FILEs > 0
  1538                          
  1539                                ; construct list of open files
  1540                          
  1541                                IF 6 > 0
  1542                          
  1543                                   ; number of FILEs statically generated > 0
  1544                          
  1545                                   SECTION data_clib
  1546                                   SECTION data_stdio
  1547                          
  1548                                   PUBLIC __stdio_open_file_list
  1549                          
  1550  0066  5700                       __stdio_open_file_list:  defw __i_stdio_file_5
  1551                          
  1552                                ELSE
  1553                          
  1554                                   ; number of FILEs statically generated = 0
  1555                          
  1556                                   SECTION bss_clib
  1557                                   SECTION bss_stdio
  1558                          
  1559                                   PUBLIC __stdio_open_file_list
  1560                          
  1561                                   __stdio_open_file_list:  defw 0
  1562                          
  1563                                ENDIF
  1564                          
  1565                                ; construct list of closed / available FILEs
  1566                          
  1567                                SECTION data_clib
  1568                                SECTION data_stdio
  1569                          
  1570                                PUBLIC __stdio_closed_file_list
  1571                          
  1572  0068  00006800                __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
  1573                          
  1574                                IF __clib_fopen_max > 6
  1575                          
  1576                                   defc __MAX_FOPEN = __clib_fopen_max
  1577                          
  1578                                   ; create extra FILE structures
  1579                          
  1580                                   SECTION bss_clib
  1581                                   SECTION bss_stdio
  1582                          
  1583                                   __stdio_file_extra:      defs (__clib_fopen_max - 6) * 15
  1584                          
  1585                                   SECTION code_crt_init
  1586                          
  1587                                      ld bc,__stdio_closed_file_list
  1588                                      ld de,__stdio_file_extra
  1589                                      ld l,__clib_fopen_max - 6
  1590                          
  1591                                   loop:
  1592                          
  1593                                      push hl
  1594                          
  1595                                      EXTERN asm_p_forward_list_alt_push_front
  1596                                      call asm_p_forward_list_alt_push_front
  1597                          
  1598                                      ld de,15
  1599                                      add hl,de
  1600                                      ex de,hl
  1601                          
  1602                                      pop hl
  1603                          
  1604                                      dec l
  1605                                      jr nz, loop
  1606                          
  1607                                ELSE
  1608                          
  1609                                   defc __MAX_FOPEN = 6
  1610                          
  1611                                ENDIF
  1612                          
  1613                             ENDIF
  1614                          
  1615                             IF (__clib_fopen_max = 0) && (6 = 0)
  1616                          
  1617                                defc __MAX_FOPEN = 0
  1618                          
  1619                                ; create empty file lists
  1620                          
  1621                                SECTION bss_clib
  1622                                SECTION bss_stdio
  1623                          
  1624                                PUBLIC __stdio_open_file_list
  1625                                __stdio_open_file_list:  defw 0
  1626                          
  1627                                SECTION data_clib
  1628                                SECTION data_stdio
  1629                          
  1630                                PUBLIC __stdio_closed_file_list
  1631                                __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
  1632                          
  1633                             ENDIF
  1634                          
  1635                             IF (__clib_fopen_max < 0) && (6 = 0)
  1636                          
  1637                                defc __MAX_FOPEN = 0
  1638                          
  1639                             ENDIF
  1640                          
  1641                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1642                             ;; create fd table
  1643                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1644                          
  1645                             ; __clib_open_max  = max number of open fds specified by user
  1646                             ; 6 = number of static file descriptors created
  1647                          
  1648                             PUBLIC __fcntl_fdtbl
  1649                             PUBLIC __fcntl_fdtbl_size
  1650                          
  1651                             IF 6 > 0
  1652                          
  1653                                ; create rest of fd table in data segment
  1654                          
  1655                                SECTION data_fcntl_fdtable_body
  1656                          
  1657                                EXTERN __data_fcntl_fdtable_body_head
  1658                          
  1659                                defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
  1660                          
  1661                                IF __clib_open_max > 6
  1662                          
  1663                                   SECTION data_fcntl_fdtable_body
  1664                          
  1665                                   defs (__clib_open_max - 6) * 2
  1666                                   defc __fcntl_fdtbl_size = __clib_open_max
  1667                          
  1668                                ELSE
  1669                          
  1670                                   defc __fcntl_fdtbl_size = 6
  1671                          
  1672                                ENDIF
  1673                          
  1674                             ELSE
  1675                          
  1676                                IF __clib_open_max > 0
  1677                          
  1678                                   ; create fd table in bss segment
  1679                          
  1680                                   SECTION bss_clib
  1681                                   SECTION bss_fcntl
  1682                          
  1683                                   __fcntl_fdtbl:        defs __clib_open_max * 2
  1684                          
  1685                                ELSE
  1686                          
  1687                                   ; no fd table at all
  1688                          
  1689                                   defc __fcntl_fdtbl = 0
  1690                          
  1691                                ENDIF
  1692                          
  1693                                defc __fcntl_fdtbl_size = __clib_open_max
  1694                          
  1695                             ENDIF
  1696                          
  1697                          	PUBLIC __MAX_OPEN
  1698                          	defc   __MAX_OPEN = __fcntl_fdtbl_size
  1699                          
  1700                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1701                             ;; finalize stdio heap
  1702                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1703                          
  1704                             ; __clib_stdio_heap_size  = desired stdio heap size in bytes
  1705                             ; 185  = byte size of static FDSTRUCTs
  1706                             ; 5   = number of heap allocations
  1707                             ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
  1708                          
  1709                             IF 185 > 0
  1710                          
  1711                                ; static FDSTRUCTs have been allocated in the heap
  1712                          
  1713                                SECTION data_clib
  1714                                SECTION data_fcntl
  1715                          
  1716                                PUBLIC __stdio_heap
  1717                          
  1718  0000  0000                    __stdio_heap:            defw __stdio_block
  1719                          
  1720                                SECTION data_fcntl_stdio_heap_head
  1721                          
  1722                                __stdio_block:
  1723                          
  1724  0000  00                         defb 0                ; no owner
  1725  0001  01                         defb 0x01             ; mtx_plain
  1726  0002  00                         defb 0                ; number of lock acquisitions
  1727  0003  fe                         defb 0xfe             ; spinlock (unlocked)
  1728  0004  0000                       defw 0                ; list of threads blocked on mutex
  1729                          
  1730                                IF __clib_stdio_heap_size > (185 + 14)
  1731                          
  1732                                   ; expand stdio heap to desired size
  1733                          
  1734                                   SECTION data_fcntl_stdio_heap_body
  1735                          
  1736                                   __i_fcntl_heap_5:
  1737                          
  1738  00b7  0000                          defw __i_fcntl_heap_6
  1739  00b9  0000                          defw 0
  1740  00bb  a000                          defw __i_fcntl_heap_4
  1741  00bd  0000000000000000              defs __clib_stdio_heap_size - 185 - 14
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              00                
  1742                          
  1743                                   ; terminate stdio heap
  1744                          
  1745                                   SECTION data_fcntl_stdio_heap_tail
  1746                          
  1747  0000  0000                       __i_fcntl_heap_6:   defw 0
  1748                          
  1749                                ELSE
  1750                          
  1751                                   ; terminate stdio heap
  1752                          
  1753                                   SECTION data_fcntl_stdio_heap_tail
  1754                          
  1755                                   __i_fcntl_heap_5:   defw 0
  1756                          
  1757                                ENDIF
  1758                          
  1759                             ELSE
  1760                          
  1761                                ; no FDSTRUCTs statically created
  1762                          
  1763                                IF __clib_stdio_heap_size > 14
  1764                          
  1765                                   SECTION data_clib
  1766                                   SECTION data_fcntl
  1767                          
  1768                                   PUBLIC __stdio_heap
  1769                          
  1770                                   __stdio_heap:         defw __stdio_block
  1771                          
  1772                                   SECTION bss_clib
  1773                                   SECTION bss_fcntl
  1774                          
  1775                                   PUBLIC __stdio_block
  1776                          
  1777                                   __stdio_block:         defs __clib_stdio_heap_size
  1778                          
  1779                                   SECTION code_crt_init
  1780                          
  1781                                   ld hl,__stdio_block
  1782                                   ld bc,__clib_stdio_heap_size
  1783                          
  1784                                   EXTERN asm_heap_init
  1785                                   call asm_heap_init
  1786                          
  1787                                ENDIF
  1788                          
  1789                             ENDIF
  1790                          
  1791                          
  1792                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1793                          ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1794                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1795                          
  1796                          SECTION CODE
  1797                          
  1798                          PUBLIC __Start, __Exit
  1799                          
  1800                          EXTERN _main, asm_cpm_bdos
  1801                          
  1802                          Qualify:
  1803                          
  1804                             ; disqualify 8080
  1805                          
  1806  0000  97                   sub a
  1807  0001  e21800               jp po, __Continue
  1808                          
  1809  0004  0e09                 ld c,__CPM_PRST
  1810  0006  110d00               ld de,disqualify_s
  1811                          
  1812  0009  cd0000               call asm_cpm_bdos
  1813  000c  c7                   rst 0
  1814                          
  1815                          disqualify_s:
  1816                          
  1817  000d  7a3830206f6e6c79     defm "z80 only"
  1818  0015  0d0a24               defb 13,10,'$'
  1819                          
  1820                          __Continue:
  1821                          
  1822                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1823                          ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1824                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1825                          
  1826                          IF __crt_include_preamble
  1827                          
  1828                             include "crt_preamble.asm"
  1829                             SECTION CODE
  1830                          
  1831                          ENDIF
  1832                          
  1833                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1834                          ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1835                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1836                          
  1837                          __Start:
  1838                          
  1839                             include "../crt_start_di.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_start_di.inc:
     1                             IF (__crt_enable_eidi & 0x01)
     2                          
     3                                di
     4                          
     5                             ENDIF
     6                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1840                             include "../crt_save_sp.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_save_sp.inc:
     1                          
     2                             ; do not save sp if
     3                             ; * program jumps to address on exit
     4                             ; * program halts on exit
     5                          
     6                             IF (__crt_on_exit & 0x10000)
     7                          
     8                                IF (__crt_on_exit & 0x8)
     9                          
    10                                   ; program restarts on exit
    11                          
    12                                   IF (__register_sp = -1)
    13                          
    14                                      IF __CPU_INTEL__ || __CPU_GBZ80__
    15                                       ld hl,sp
    16                                       ld (__sp_or_ret),hl
    17                                     ELSE
    18                                       ld (__sp_or_ret),sp
    19                                     ENDIF
    20                          
    21                                   ENDIF
    22                          
    23                                ELIF (__crt_on_exit & 0x4)
    24                          
    25                                   ; program jumps to caller on exit
    26                          
    27                                   IF (__crt_enable_commandline != 2)
    28                                      pop hl
    29                                      ld (__sp_or_ret),hl
    30                                   ELSE
    31                                      pop de
    32                                      ld (__sp_or_ret),de
    33                                   ENDIF
    34                          
    35                                ELIF (__crt_on_exit & 0x2)
    36                          
    37                                   ; program returns to caller on exit
    38                          
    39                                   IF __CPU_INTEL__ || __CPU_GBZ80__
    40                                      ld hl,sp
    41                                      ld (__sp_or_ret),hl
    42                                   ELSE
    43                                      ld (__sp_or_ret),sp
    44                                   ENDIF
    45                          
    46                                ENDIF
    47                          
    48                             ENDIF
    49                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1841                          
  1842                          __Restart:
  1843                          
  1844                             include "../crt_init_sp.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_init_sp.inc:
     1                          IF __register_sp < -1
     2                             IF __CPU_INTEL__
     3                               ld hl,(-__register_sp)      ; stack location is stored at memory address
     4                               ld sp,hl
     5                             ELSE
     6  0018  ed7b0600               ld sp,(-__register_sp)      ; stack location is stored at memory address
     7                             ENDIF
     8                          ELSE
     9                          
    10                             IF __register_sp != -1
    11                          
    12                                ld sp,__register_sp      ; stack is at fixed address
    13                          
    14                             ENDIF
    15                          
    16                          ENDIF
    17                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1845                          
  1846                             ; command line
  1847                          
  1848                          IF __crt_enable_commandline = 1
  1849                          
  1850                             include "../crt_cmdline_empty.inc"
  1851                          
  1852                          ENDIF
  1853                          
  1854                          IF __crt_enable_commandline >= 3
  1855                          
  1856                             ; copy command line words from default dma buffer to stack
  1857                             ; must do this as the default dma buffer may be used by the cpm program
  1858                          
  1859                             EXTERN l_command_line_parse
  1860                          
  1861  001c  218000               ld hl,0x0080                ; default dma buffer
  1862                          
  1863  001f  4e                   ld c,(hl)
  1864  0020  44                   ld b,h                      ; bc = length of command line
  1865                          
  1866  0021  2c                   inc l
  1867  0022  eb                   ex de,hl
  1868                          
  1869  0023  cd0000               call l_command_line_parse
  1870                          
  1871                             ; cpm does not supply program name in command line
  1872                             ; so place empty string in argv[0] instead
  1873                          
  1874                             ; bc = int argc
  1875                             ; hl = char *argv[]
  1876                             ; de = & empty string
  1877                             ; bc'= num chars in redirector
  1878                             ; hl'= char *redirector
  1879                          
  1880  0026  d5                   push de                     ; empty string added to front of argv[]
  1881                          
  1882  0027  2b                   dec hl
  1883  0028  2b                   dec hl                      ; char *argv[] adjusted to include empty string at index 0
  1884                          
  1885  0029  0c                   inc c                       ; argc++
  1886                          
  1887                          ENDIF
  1888                          
  1889                          __Restart_2:
  1890                          
  1891                          IF __crt_enable_commandline >= 1
  1892                          
  1893  002a  e5                   push hl                     ; argv
  1894  002b  c5                   push bc                     ; argc
  1895                          
  1896                          ENDIF
  1897                          
  1898                             ; initialize data section
  1899                          
  1900                             include "../clib_init_data.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../clib_init_data.inc:
     1                          
     2                             ; initialize data section
     3                          
     4                             IF (__crt_model = 1)
     5                          
     6                                ; rom model + data section is not compressed
     7                          
     8                                EXTERN __CODE_END_tail
     9                                EXTERN __DATA_head, __DATA_END_tail
    10                          
    11                                ld hl,__CODE_END_tail
    12                                ld de,__DATA_head
    13                                ld bc,__DATA_END_tail - __DATA_head
    14                          
    15                                EXTERN asm_memcpy
    16                                call   asm_memcpy
    17                          
    18                             ENDIF
    19                          
    20                             IF (__crt_model >= 2)
    21                          
    22                                ; rom model + data section is compressed
    23                          
    24                                EXTERN __CODE_END_tail
    25                                EXTERN __DATA_head, __DATA_END_tail
    26                          
    27                                ld hl,__CODE_END_tail
    28                                ld de,__DATA_head
    29                                ld bc,__DATA_END_tail - __DATA_head
    30                          
    31                                ld a,b
    32                                or c
    33                          
    34                              IF (__crt_model = 2)
    35                                EXTERN   asm_dzx7_standard
    36                                call nz, asm_dzx7_standard
    37                              ELIF (__crt_model = 3)
    38                                EXTERN   asm_dzx0_standard
    39                                call nz, asm_dzx0_standard
    40                              ENDIF
    41                          
    42                             ENDIF
    43                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1901                          
  1902                             ; initialize bss section
  1903                          
  1904                             include "../clib_init_bss.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../clib_init_bss.inc:
     1                          
     2                             ; initialize bss section
     3                          
     4                             IF __crt_initialize_bss
     5                          
     6                                   EXTERN asm_memset
     7                                   EXTERN __BSS_head, __BSS_UNINITIALIZED_head
     8                          
     9                                   ld hl,__BSS_head
    10                                   ld bc,__BSS_UNINITIALIZED_head - __BSS_head
    11                          
    12                                   ld e,0
    13                                   call asm_memset
    14                          
    15                             ENDIF
    16                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1905                          
  1906                             ; interrupt mode
  1907                          
  1908                             include "../crt_set_interrupt_mode.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_set_interrupt_mode.inc:
     1                             IF (__crt_org_vector_table > 0)
     2                          
     3                                ; copy interrupt vector table to final location
     4                          
     5                                EXTERN __code_crt_interrupt_vector_table_head
     6                                EXTERN __code_crt_interrupt_vector_table_size
     7                          
     8                                ld hl,__code_crt_interrupt_vector_table_head
     9                                ld de,__crt_org_vector_table
    10                                ld bc,__code_crt_interrupt_vector_table_size
    11                          
    12                                EXTERN asm_memcpy
    13                                call   asm_memcpy
    14                          
    15                             ENDIF
    16                          
    17                             IF (__crt_org_vector_table != 0)
    18                          
    19                                IF (__crt_org_vector_table < 0)
    20                          
    21                                   ld a,-__crt_org_vector_table/$100
    22                          
    23                                ELSE
    24                          
    25                                   ld a,__crt_org_vector_table/$100
    26                          
    27                                ENDIF
    28                          
    29                                ld i,a
    30                          
    31                                IF (__Z180)
    32                          
    33                                  ; Set the z180 internal interrupt vector low byte
    34                          
    35                                  IF (__crt_org_vector_table < 0)
    36                          
    37                                     ld a,+(-__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
    38                          
    39                                  ELSE
    40                          
    41                                     ld a,+(__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
    42                          
    43                                  ENDIF
    44                          
    45                                  out0 (IL),a
    46                          
    47                                ENDIF
    48                          
    49                             ENDIF
    50                          
    51                             IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
    52                          
    53                                ; set interrupt mode
    54                          
    55                                im __crt_interrupt_mode
    56                          
    57                             ENDIF
    58                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1909                          
  1910                          SECTION code_crt_init          ; user and library initialization
  1911                          
  1912                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1913                          ;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1914                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1915                          
  1916                          SECTION code_crt_main
  1917                          
  1918                             include "../crt_start_ei.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_start_ei.inc:
     1                             IF (__crt_enable_eidi & 0x02)
     2                          
     3                                ei
     4                          
     5                             ENDIF
     6                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1919                          
  1920                             ; call user program
  1921                          
  1922  0000  cd0000               call _main                  ; hl = return status
  1923                          
  1924                             ; run exit stack
  1925                          
  1926                          IF __clib_exit_stack_size > 0
  1927                          
  1928                             EXTERN asm_exit
  1929                             jp asm_exit                 ; exit function jumps to __Exit
  1930                          
  1931                          ENDIF
  1932                          
  1933                          __Exit:
  1934                          
  1935                          IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
  1936                          
  1937                             ; not restarting
  1938                          
  1939  0003  e5                   push hl                     ; save return status
  1940                          
  1941                          ENDIF
  1942                          
  1943                          SECTION code_crt_exit          ; user and library cleanup
  1944                          SECTION code_crt_return
  1945                          
  1946                             ; close files
  1947                          
  1948                             include "../clib_close.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../clib_close.inc:
     1                             IF __crt_enable_close
     2                          
     3                                ; TODO
     4                                ; close open files
     5                          
     6                             ENDIF
     7                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1949                          
  1950                             ; terminate
  1951                          
  1952                             include "../crt_exit_eidi.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_exit_eidi.inc:
     1                             IF (__crt_enable_eidi & 0x10)
     2                          
     3                                di
     4                          
     5                             ENDIF
     6                          
     7                             IF (__crt_interrupt_mode_exit >= 0) && (__crt_interrupt_mode_exit <= 2)
     8                          
     9                                   im __crt_interrupt_mode_exit
    10                          
    11                             ENDIF
    12                          
    13                             IF (__crt_enable_eidi & 0x20)
    14                          
    15                                ei
    16                          
    17                             ENDIF
    18                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1953                             include "../crt_restore_sp.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_restore_sp.inc:
     1                          
     2                             IF (__crt_on_exit & 0x10000)
     3                          
     4                                IF (__crt_on_exit & 0x8)
     5                          
     6                                   ; program restarts
     7                          
     8                                   IF (__crt_enable_commandline < 2)
     9                          
    10                                      IF (__register_sp = -1)
    11                          
    12                                        IF __CPU_INTEL__
    13                                          ld hl,(__sp_or_ret)
    14                                          ld sp,hl
    15                                        ELSE
    16                                          ld sp,(__sp_or_ret)
    17                                        ENDIF
    18                          
    19                                      ENDIF
    20                          
    21                                   ELSE
    22                          
    23                                      IF (__register_sp = -1)
    24                          
    25                                        IF __CPU_INTEL__
    26                                          ld hl,(__sp_or_ret)
    27                                          ld sp,hl
    28                                        ELSE
    29                                          ld sp,(__sp_or_ret)
    30                                        ENDIF
    31                          
    32                                      ENDIF
    33                          
    34                                   ENDIF
    35                          
    36                                ELSE
    37                          
    38                                   pop hl                ; hl = return status
    39                          
    40                                   IF (__crt_on_exit & 0x2)
    41                          
    42                                      ; program returns to caller
    43                          
    44                                     IF __CPU_INTEL__
    45                                       ld hl,(__sp_or_ret)
    46                                       ld sp,hl
    47                                     ELSE
    48                                       ld sp,(__sp_or_ret)
    49                                     ENDIF
    50                          
    51                                   ENDIF
    52                          
    53                                ENDIF
    54                          
    55                             ELSE
    56                          
    57                                ; program jumps to absolute address
    58                          
    59  0000  e1                      pop hl                   ; hl = return status
    60                          
    61                             ENDIF
    62                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1954                             include "../crt_program_exit.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_program_exit.inc:
     1                          
     2                             IF (__crt_on_exit & 0x10000)
     3                          
     4                                IF (__crt_on_exit & 0x8)
     5                          
     6                                   ; program restarts
     7                          
     8                                   IF (__crt_enable_commandline < 2)
     9                          
    10                                      jp __Restart
    11                          
    12                                   ELSE
    13                          
    14                                      IF (__register_sp != -1)
    15                          
    16                                         include "../crt_init_sp.inc"
    17                          
    18                                      ENDIF
    19                          
    20                                      include "../crt_cmdline_empty.inc"
    21                          
    22                                      jp __Restart_2
    23                          
    24                                   ENDIF
    25                          
    26                                ELIF (__crt_on_exit & 0x4)
    27                          
    28                                   ; program jumps to caller
    29                          
    30                                   ld de,(__sp_or_ret)
    31                                   push de
    32                                   ret
    33                          
    34                                ELIF (__crt_on_exit & 0x2)
    35                          
    36                                   ; program returns to caller
    37                          
    38                                   ret
    39                          
    40                                ELSE
    41                          
    42                                   ; program halts
    43                          
    44                                   halt
    45                                   jr ASMPC
    46                          
    47                                ENDIF
    48                          
    49                             ELSE
    50                          
    51                                ; program jumps to absolute address
    52                          
    53                                IF (__crt_on_exit & 0xffff)
    54                          
    55                                   jp __crt_on_exit & 0xffff
    56                          
    57                                ELSE
    58                          
    59  0001  c7                         rst 0
    60                          
    61                                ENDIF
    62                          
    63                             ENDIF
    64                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1955                          
  1956                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1957                          ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1958                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1959                          
  1960                          include "../crt_jump_vectors_z80.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../crt_jump_vectors_z80.inc:
     1                          IF __page_zero_present
     2                          
     3                          SECTION smc_jump_vectors
     4                          
     5                          IF ((__crt_enable_rst & 0x0202) = 0x0202)
     6                          
     7                             PUBLIC _z80_rst_08h_vector
     8                          
     9                             defc _z80_rst_08h_vector = __z80_rst_08h + 1
    10                          
    11                             EXTERN _z80_rst_08h
    12                          
    13                             __z80_rst_08h:
    14                          
    15                                jp _z80_rst_08h
    16                          
    17                          ENDIF
    18                          
    19                          IF ((__crt_enable_rst & 0x0404) = 0x0404)
    20                          
    21                             PUBLIC _z80_rst_10h_vector
    22                          
    23                             defc _z80_rst_10h_vector = __z80_rst_10h + 1
    24                          
    25                             EXTERN _z80_rst_10h
    26                          
    27                             __z80_rst_10h:
    28                          
    29                                jp _z80_rst_10h
    30                          
    31                          ENDIF
    32                          
    33                          IF ((__crt_enable_rst & 0x0808) = 0x0808)
    34                          
    35                             PUBLIC _z80_rst_18h_vector
    36                          
    37                             defc _z80_rst_18h_vector = __z80_rst_18h + 1
    38                          
    39                             EXTERN _z80_rst_18h
    40                          
    41                             __z80_rst_18h:
    42                          
    43                                jp _z80_rst_18h
    44                          
    45                          ENDIF
    46                          
    47                          IF ((__crt_enable_rst & 0x1010) = 0x1010)
    48                          
    49                             PUBLIC _z80_rst_20h_vector
    50                          
    51                             defc _z80_rst_20h_vector = __z80_rst_20h + 1
    52                          
    53                             EXTERN _z80_rst_20h
    54                          
    55                             __z80_rst_20h:
    56                          
    57                                jp _z80_rst_20h
    58                          
    59                          ENDIF
    60                          
    61                          IF ((__crt_enable_rst & 0x2020) = 0x2020)
    62                          
    63                             PUBLIC _z80_rst_28h_vector
    64                          
    65                             defc _z80_rst_28h_vector = __z80_rst_28h + 1
    66                          
    67                             EXTERN _z80_rst_28h
    68                          
    69                             __z80_rst_28h:
    70                          
    71                                jp _z80_rst_28h
    72                          
    73                          ENDIF
    74                          
    75                          IF ((__crt_enable_rst & 0x4040) = 0x4040)
    76                          
    77                             PUBLIC _z80_rst_30h_vector
    78                          
    79                             defc _z80_rst_30h_vector = __z80_rst_30h + 1
    80                          
    81                             EXTERN _z80_rst_30h
    82                          
    83                             __z80_rst_30h:
    84                          
    85                                jp _z80_rst_30h
    86                          
    87                          ENDIF
    88                          
    89                          IF ((__crt_enable_rst & 0x8080) = 0x8080)
    90                          
    91                             PUBLIC _z80_rst_38h_vector
    92                          
    93                             defc _z80_rst_38h_vector = __z80_rst_38h + 1
    94                          
    95                             EXTERN _z80_rst_38h
    96                          
    97                             __z80_rst_38h:
    98                          
    99                                jp _z80_rst_38h
   100                          
   101                          ENDIF
   102                          
   103                          IF (__crt_enable_nmi > 1)
   104                          
   105                             PUBLIC _z80_nmi_vector
   106                          
   107                             defc _z80_nmi_vector = __z80_nmi + 1
   108                          
   109                             EXTERN _z80_nmi
   110                          
   111                             __z80_nmi:
   112                          
   113                                jp _z80_nmi
   114                          
   115                          ENDIF
   116                          
   117                          ENDIF
   118                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1961                          
  1962                          IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
  1963                          
  1964                             SECTION BSS_UNINITIALIZED
  1965                             __sp_or_ret:  defw 0
  1966                          
  1967                          ENDIF
  1968                          
  1969                          include "../clib_variables.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../clib_variables.inc:
     1                          
     2                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                          ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                          IF __clib_balloc_table_size > 0
     7                          
     8                             ; create balloc table
     9                          
    10                             SECTION data_clib
    11                             SECTION data_alloc_balloc
    12                          
    13                             PUBLIC __balloc_array
    14                          
    15                             __balloc_array:             defw __balloc_table
    16                          
    17                             SECTION bss_clib
    18                             SECTION bss_alloc_balloc
    19                          
    20                             __balloc_table:             defs __clib_balloc_table_size * 2
    21                          
    22                          ENDIF
    23                          
    24                          IF __clib_malloc_heap_size = -1
    25                          
    26                             ; place malloc heap between bss section and bottom of the stack
    27                          
    28                             SECTION data_clib
    29                             SECTION data_alloc_malloc
    30                          
    31                             PUBLIC __malloc_heap
    32                          
    33                             EXTERN __BSS_END_tail
    34                          
    35  0000  0000                 __malloc_heap:              defw __BSS_END_tail
    36                          
    37                             SECTION code_crt_init
    38                          
    39  0005  21ffff               ld hl,-1                    ; ensure sp == 0 is accepted
    40  0008  39                   add hl,sp                   ; hl = top of the stack
    41                          
    42  0009  010000               ld bc,__BSS_END_tail
    43                          
    44                          IF __CPU_8085__
    45                             sub hl,bc                   ; hl = space between top of stack and end of bss - 1
    46                          ELIF __CPU_8080__ || __CPU_GBZ80__
    47                             ld a,l
    48                             sub c
    49                             ld a,h
    50                             sbc b                       ; hl = space between top of stack and end of bss - 1
    51                          ELSE
    52  000c  b7                   or a
    53  000d  ed42                 sbc hl,bc                   ; hl = space between top of stack and end of bss - 1
    54                          ENDIF
    55                          
    56  000f  da0300               jp C,__Exit                 ; if stack overlaps bss, this is a fatal error
    57                          
    58  0012  010e02               ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
    59                          
    60                          IF __CPU_8085__
    61                             sub hl,bc                   ; hl = max heap size - 15
    62                          ELIF __CPU_8080__ || __CPU_GBZ80__
    63                             ld a,l
    64                             sub c
    65                             ld a,h
    66                             sbc b                       ; hl = max heap size - 15
    67                          ELSE
    68  0015  ed42                 sbc hl,bc                   ; hl = max heap size - 15
    69                          ENDIF
    70                          
    71  0017  da0300               jp C,__Exit                 ; if no room for heap, this is a fatal error
    72                          
    73  001a  010f00               ld bc,15
    74  001d  09                   add hl,bc
    75                          
    76  001e  444d                 ld bc,hl                    ; bc = available heap size
    77                          
    78  0020  210000               ld hl,__BSS_END_tail        ; hl = __BSS_END_tail = start of heap
    79                          
    80                             EXTERN asm_heap_init
    81  0023  cd0000               call asm_heap_init
    82                          
    83                          ELIF __clib_malloc_heap_size < -1
    84                          
    85                             ; place malloc heap between bss section and including address abs(CLIB_MALLOC_HEAP_SIZE)
    86                          
    87                             SECTION data_clib
    88                             SECTION data_alloc_malloc
    89                          
    90                             PUBLIC __malloc_heap
    91                          
    92                             EXTERN __BSS_END_tail
    93                          
    94                             __malloc_heap:              defw __BSS_END_tail
    95                          
    96                             SECTION code_crt_init
    97                          
    98                             ld hl,-__clib_malloc_heap_size - 13
    99                          
   100                             ld bc,__BSS_END_tail
   101                          
   102                          IF __CPU_8085__
   103                             sub hl,bc                   ; hl = space between top of stack and end of bss - 1
   104                          ELIF __CPU_8080__ || __CPU_GBZ80__
   105                             ld a,l
   106                             sub c
   107                             ld a,h
   108                             sbc b
   109                          ELSE
   110                             or a
   111                             sbc hl,bc                   ; hl = space between top of stack and end of bss - 1
   112                          ENDIF
   113                          
   114                             jp C,__Exit                 ; if no room for minimum size heap, fatal error
   115                          
   116                             ld bc,14
   117                             add hl,bc
   118                          
   119                             ld bc,hl                    ; bc = available heap size
   120                          
   121                             ld hl,__BSS_END_tail        ; hl = __BSS_END_tail = start of heap
   122                          
   123                             EXTERN asm_heap_init
   124                             call asm_heap_init
   125                          
   126                          ELIF __clib_malloc_heap_size > 14
   127                          
   128                             ; create malloc heap in bss section
   129                          
   130                             SECTION data_clib
   131                             SECTION data_alloc_malloc
   132                          
   133                             PUBLIC __malloc_heap
   134                          
   135                             __malloc_heap:              defw __malloc_block
   136                          
   137                             SECTION bss_clib
   138                             SECTION bss_alloc_malloc
   139                          
   140                             __malloc_block:             defs __clib_malloc_heap_size
   141                          
   142                             SECTION code_crt_init
   143                          
   144                             ld hl,__malloc_block
   145                          
   146                             ld bc,__clib_malloc_heap_size
   147                          
   148                             EXTERN asm_heap_init
   149                             call asm_heap_init
   150                          
   151                          ENDIF
   152                          
   153                             ; create exit stack
   154                          
   155                             SECTION bss_clib
   156                             SECTION bss_stdlib
   157                          
   158                             PUBLIC __exit_stack
   159                          
   160  0000  00                   __exit_stack:               defb 0
   161                                                         defs __exit_stack_size * 2
   162                          
   163                             ; create quickexit stack
   164                          
   165                             SECTION bss_clib
   166                             SECTION bss_stdlib
   167                          
   168                             PUBLIC __quickexit_stack
   169                          
   170  0001  00                   __quickexit_stack:          defb 0
   171                                                         defs __quickexit_stack_size * 2
   172                          
   173                             ; assign thread id
   174                          
   175                             SECTION data_clib
   176                             SECTION data_threads
   177                          
   178                             PUBLIC __thrd_id
   179                          
   180  0000  01                   __thrd_id:                  defb 1
   181                          
   182                          ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   183                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1970                          
  1971                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1972                          ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1973                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1974                          
  1975                          include "../clib_stubs.inc"
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config/../../libsrc/_DEVELOPMENT/target/cpm/../clib_stubs.inc:
     1                          
     2                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     3                             ;; unimplemented
     4                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                          
     6                             ; system()
     7                          
     8                             PUBLIC __ch_system
     9                          
    10                             EXTERN error_zc
    11                          
    12                             defc __ch_system = error_zc
    13                          
    14                             ; threads
    15                             ; these functions are preliminary only
    16                          
    17                             PUBLIC __thread_context_switch
    18                             PUBLIC __thread_block_timeout
    19                             PUBLIC __thread_unblock
    20                          
    21                             EXTERN l_ret
    22                          
    23                             defc __thread_context_switch = l_ret
    24                             defc __thread_block_timeout  = l_ret
    25                             defc __thread_unblock        = l_ret
    26                          
    27                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                             ;; dynamically generated functions
    29                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                          
    31                             ; dynamic printf
    32                          
    33                             IFNDEF CLIB_OPT_PRINTF
    34                                IFDEF CLIB_OPT_PRINTF_2
    35                                   defc CLIB_OPT_PRINTF = 0
    36                                ENDIF
    37                             ENDIF
    38                          
    39                             IFNDEF CLIB_OPT_PRINTF_2
    40                                IFDEF CLIB_OPT_PRINTF
    41                                   defc CLIB_OPT_PRINTF_2 = 0
    42                                ENDIF
    43                             ENDIF
    44                          
    45                             IFDEF CLIB_OPT_PRINTF
    46                          
    47                                IF __SDCC_IY
    48                          
    49                                   INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
    50                          
    51                                ELSE
    52                          
    53                                   INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
    54                          
    55                                ENDIF
    56                          
    57                             ENDIF
    58                          
    59                             ; dynamic scanf
    60                          
    61                             IFNDEF CLIB_OPT_SCANF
    62                                IFDEF CLIB_OPT_SCANF_2
    63                                   defc CLIB_OPT_SCANF = 0
    64                                ENDIF
    65                             ENDIF
    66                          
    67                             IFNDEF CLIB_OPT_SCANF_2
    68                                IFDEF CLIB_OPT_SCANF
    69                                   defc CLIB_OPT_SCANF_2 = 0
    70                                ENDIF
    71                             ENDIF
    72                          
    73                             IFDEF CLIB_OPT_SCANF
    74                          
    75                                IF __SDCC_IY
    76                          
    77                                   INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
    78                          
    79                                ELSE
    80                          
    81                                   INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
    82                          
    83                                ENDIF
    84                          
    85                             ENDIF
    86                          
/home/miguel/yellow-msx-series-for-rc2014/z88dk/lib/config//../..//libsrc/_DEVELOPMENT/target/cpm/cpm_crt.asm.m4:
  1976                          
  1977                          
  1978                          
  1979                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1980                          ;; cp/m z88dk console (one window) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1981                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1982                          
  1983                          
  1984                          
